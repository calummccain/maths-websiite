// Order n hexagonal

const hexagonData = (n) => {

    return {
        vertices: [
            [238.75, 317, -11, -8], [205, 272, -11, -7], [175.75, 233, -11, -6],
            [151, 200, -11, -5], [130.75, 173, -11, -4], [115, 152, -11, -3],
            [103.75, 137, -11, -2], [97, 128, -11, -1], [94.75, 125, -11, 0],
            [97, 128, -11, 1], [103.75, 137, -11, 2], [115, 152, -11, 3],
            [130.75, 173, -11, 4], [151, 200, -11, 5], [175.75, 233, -11, 6],
            [205, 272, -11, 7], [238.75, 317, -11, 8], [223, 296, -10, -8],
            [189.25, 251, -10, -7], [160, 212, -10, -6], [135.25, 179, -10, -5],
            [115, 152, -10, -4], [99.25, 131, -10, -3], [88, 116, -10, -2],
            [81.25, 107, -10, -1], [79, 104, -10, 0], [81.25, 107, -10, 1],
            [88, 116, -10, 2], [99.25, 131, -10, 3], [115, 152, -10, 4],
            [135.25, 179, -10, 5], [160, 212, -10, 6], [189.25, 251, -10, 7],
            [223, 296, -10, 8], [196, 260, -8, -8], [162.25, 215, -8, -7],
            [133, 176, -8, -6], [108.25, 143, -8, -5], [88, 116, -8, -4],
            [72.25, 95, -8, -3], [61, 80, -8, -2], [54.25, 71, -8, -1],
            [52, 68, -8, 0], [54.25, 71, -8, 1], [61, 80, -8, 2],
            [72.25, 95, -8, 3], [88, 116, -8, 4], [108.25, 143, -8, 5],
            [133, 176, -8, 6], [162.25, 215, -8, 7], [196, 260, -8, 8],
            [184.75, 245, -7, -8], [151, 200, -7, -7], [121.75, 161, -7, -6],
            [97, 128, -7, -5], [76.75, 101, -7, -4], [61, 80, -7, -3],
            [49.75, 65, -7, -2], [43, 56, -7, -1], [40.75, 53, -7, 0],
            [43, 56, -7, 1], [49.75, 65, -7, 2], [61, 80, -7, 3],
            [76.75, 101, -7, 4], [97, 128, -7, 5], [121.75, 161, -7, 6],
            [151, 200, -7, 7], [184.75, 245, -7, 8], [166.75, 221, -5, -8],
            [133, 176, -5, -7], [103.75, 137, -5, -6], [79, 104, -5, -5],
            [58.75, 77, -5, -4], [43, 56, -5, -3], [31.75, 41, -5, -2],
            [25, 32, -5, -1], [22.75, 29, -5, 0], [25, 32, -5, 1],
            [31.75, 41, -5, 2], [43, 56, -5, 3], [58.75, 77, -5, 4],
            [79, 104, -5, 5], [103.75, 137, -5, 6], [133, 176, -5, 7],
            [166.75, 221, -5, 8], [160, 212, -4, -8], [126.25, 167, -4, -7],
            [97, 128, -4, -6], [72.25, 95, -4, -5], [52, 68, -4, -4],
            [36.25, 47, -4, -3], [25, 32, -4, -2], [18.25, 23, -4, -1],
            [16, 20, -4, 0], [18.25, 23, -4, 1], [25, 32, -4, 2],
            [36.25, 47, -4, 3], [52, 68, -4, 4], [72.25, 95, -4, 5],
            [97, 128, -4, 6], [126.25, 167, -4, 7], [160, 212, -4, 8],
            [151, 200, -2, -8], [117.25, 155, -2, -7], [88, 116, -2, -6],
            [63.25, 83, -2, -5], [43, 56, -2, -4], [27.25, 35, -2, -3],
            [16, 20, -2, -2], [9.25, 11, -2, -1], [7, 8, -2, 0],
            [9.25, 11, -2, 1], [16, 20, -2, 2], [27.25, 35, -2, 3],
            [43, 56, -2, 4], [63.25, 83, -2, 5], [88, 116, -2, 6],
            [117.25, 155, -2, 7], [151, 200, -2, 8], [148.75, 197, -1, -8],
            [115, 152, -1, -7], [85.75, 113, -1, -6], [61, 80, -1, -5],
            [40.75, 53, -1, -4], [25, 32, -1, -3], [13.75, 17, -1, -2],
            [7, 8, -1, -1], [4.75, 5, -1, 0], [7, 8, -1, 1],
            [13.75, 17, -1, 2], [25, 32, -1, 3], [40.75, 53, -1, 4],
            [61, 80, -1, 5], [85.75, 113, -1, 6], [115, 152, -1, 7],
            [148.75, 197, -1, 8], [148.75, 197, 1, -8], [115, 152, 1, -7],
            [85.75, 113, 1, -6], [61, 80, 1, -5], [40.75, 53, 1, -4],
            [25, 32, 1, -3], [13.75, 17, 1, -2], [7, 8, 1, -1],
            [4.75, 5, 1, 0], [7, 8, 1, 1], [13.75, 17, 1, 2],
            [25, 32, 1, 3], [40.75, 53, 1, 4], [61, 80, 1, 5],
            [85.75, 113, 1, 6], [115, 152, 1, 7], [148.75, 197, 1, 8],
            [151, 200, 2, -8], [117.25, 155, 2, -7], [88, 116, 2, -6],
            [63.25, 83, 2, -5], [43, 56, 2, -4], [27.25, 35, 2, -3],
            [16, 20, 2, -2], [9.25, 11, 2, -1], [7, 8, 2, 0],
            [9.25, 11, 2, 1], [16, 20, 2, 2], [27.25, 35, 2, 3],
            [43, 56, 2, 4], [63.25, 83, 2, 5], [88, 116, 2, 6],
            [117.25, 155, 2, 7], [151, 200, 2, 8], [160, 212, 4, -8],
            [126.25, 167, 4, -7], [97, 128, 4, -6], [72.25, 95, 4, -5],
            [52, 68, 4, -4], [36.25, 47, 4, -3], [25, 32, 4, -2],
            [18.25, 23, 4, -1], [16, 20, 4, 0], [18.25, 23, 4, 1],
            [25, 32, 4, 2], [36.25, 47, 4, 3], [52, 68, 4, 4],
            [72.25, 95, 4, 5], [97, 128, 4, 6], [126.25, 167, 4, 7],
            [160, 212, 4, 8], [166.75, 221, 5, -8], [133, 176, 5, -7],
            [103.75, 137, 5, -6], [79, 104, 5, -5], [58.75, 77, 5, -4],
            [43, 56, 5, -3], [31.75, 41, 5, -2], [25, 32, 5, -1],
            [22.75, 29, 5, 0], [25, 32, 5, 1], [31.75, 41, 5, 2],
            [43, 56, 5, 3], [58.75, 77, 5, 4], [79, 104, 5, 5],
            [103.75, 137, 5, 6], [133, 176, 5, 7], [166.75, 221, 5, 8],
            [184.75, 245, 7, -8], [151, 200, 7, -7], [121.75, 161, 7, -6],
            [97, 128, 7, -5], [76.75, 101, 7, -4], [61, 80, 7, -3],
            [49.75, 65, 7, -2], [43, 56, 7, -1], [40.75, 53, 7, 0],
            [43, 56, 7, 1], [49.75, 65, 7, 2], [61, 80, 7, 3],
            [76.75, 101, 7, 4], [97, 128, 7, 5], [121.75, 161, 7, 6],
            [151, 200, 7, 7], [184.75, 245, 7, 8], [196, 260, 8, -8],
            [162.25, 215, 8, -7], [133, 176, 8, -6], [108.25, 143, 8, -5],
            [88, 116, 8, -4], [72.25, 95, 8, -3], [61, 80, 8, -2],
            [54.25, 71, 8, -1], [52, 68, 8, 0], [54.25, 71, 8, 1],
            [61, 80, 8, 2], [72.25, 95, 8, 3], [88, 116, 8, 4],
            [108.25, 143, 8, 5], [133, 176, 8, 6], [162.25, 215, 8, 7],
            [196, 260, 8, 8], [223, 296, 10, -8], [189.25, 251, 10, -7],
            [160, 212, 10, -6], [135.25, 179, 10, -5], [115, 152, 10, -4],
            [99.25, 131, 10, -3], [88, 116, 10, -2], [81.25, 107, 10, -1],
            [79, 104, 10, 0], [81.25, 107, 10, 1], [88, 116, 10, 2],
            [99.25, 131, 10, 3], [115, 152, 10, 4], [135.25, 179, 10, 5],
            [160, 212, 10, 6], [189.25, 251, 10, 7], [223, 296, 10, 8],
            [238.75, 317, 11, -8], [205, 272, 11, -7], [175.75, 233, 11, -6],
            [151, 200, 11, -5], [130.75, 173, 11, -4], [115, 152, 11, -3],
            [103.75, 137, 11, -2], [97, 128, 11, -1], [94.75, 125, 11, 0],
            [97, 128, 11, 1], [103.75, 137, 11, 2], [115, 152, 11, 3],
            [130.75, 173, 11, 4], [151, 200, 11, 5], [175.75, 233, 11, 6],
            [205, 272, 11, 7], [238.75, 317, 11, 8], [274.75, 365, 13, -8],
            [241, 320, 13, -7], [211.75, 281, 13, -6], [187, 248, 13, -5],
            [166.75, 221, 13, -4], [151, 200, 13, -3], [139.75, 185, 13, -2],
            [133, 176, 13, -1], [130.75, 173, 13, 0], [133, 176, 13, 1],
            [139.75, 185, 13, 2], [151, 200, 13, 3], [166.75, 221, 13, 4],
            [187, 248, 13, 5], [211.75, 281, 13, 6], [241, 320, 13, 7],
            [274.75, 365, 13, 8], [295, 392, 14, -8], [261.25, 347, 14, -7],
            [232, 308, 14, -6], [207.25, 275, 14, -5], [187, 248, 14, -4],
            [171.25, 227, 14, -3], [160, 212, 14, -2], [153.25, 203, 14, -1],
            [151, 200, 14, 0], [153.25, 203, 14, 1], [160, 212, 14, 2],
            [171.25, 227, 14, 3], [187, 248, 14, 4], [207.25, 275, 14, 5],
            [232, 308, 14, 6], [261.25, 347, 14, 7], [295, 392, 14, 8]
        ],

        edges: [
            [0, 18], [1, 17], [1, 19], [2, 18], [2, 20],
            [3, 19], [3, 21], [4, 20], [4, 22], [5, 21],
            [5, 23], [6, 22], [6, 24], [7, 23], [7, 25],
            [8, 24], [8, 26], [9, 25], [9, 27], [10, 26],
            [10, 28], [11, 27], [11, 29], [12, 28], [12, 30],
            [13, 29], [13, 31], [14, 30], [14, 32], [15, 31],
            [15, 33], [16, 32], [17, 34], [18, 35], [19, 36],
            [20, 37], [21, 38], [22, 39], [23, 40], [24, 41],
            [25, 42], [26, 43], [27, 44], [28, 45], [29, 46],
            [30, 47], [31, 48], [32, 49], [33, 50], [34, 52],
            [35, 51], [35, 53], [36, 52], [36, 54], [37, 53],
            [37, 55], [38, 54], [38, 56], [39, 55], [39, 57],
            [40, 56], [40, 58], [41, 57], [41, 59], [42, 58],
            [42, 60], [43, 59], [43, 61], [44, 60], [44, 62],
            [45, 61], [45, 63], [46, 62], [46, 64], [47, 63],
            [47, 65], [48, 64], [48, 66], [49, 65], [49, 67],
            [50, 66], [51, 68], [52, 69], [53, 70], [54, 71],
            [55, 72], [56, 73], [57, 74], [58, 75], [59, 76],
            [60, 77], [61, 78], [62, 79], [63, 80], [64, 81],
            [65, 82], [66, 83], [67, 84], [68, 86], [69, 85],
            [69, 87], [70, 86], [70, 88], [71, 87], [71, 89],
            [72, 88], [72, 90], [73, 89], [73, 91], [74, 90],
            [74, 92], [75, 91], [75, 93], [76, 92], [76, 94],
            [77, 93], [77, 95], [78, 94], [78, 96], [79, 95],
            [79, 97], [80, 96], [80, 98], [81, 97], [81, 99],
            [82, 98], [82, 100], [83, 99], [83, 101], [84, 100],
            [85, 102], [86, 103], [87, 104], [88, 105], [89, 106],
            [90, 107], [91, 108], [92, 109], [93, 110], [94, 111],
            [95, 112], [96, 113], [97, 114], [98, 115], [99, 116],
            [100, 117], [101, 118], [102, 120], [103, 119], [103, 121],
            [104, 120], [104, 122], [105, 121], [105, 123], [106, 122],
            [106, 124], [107, 123], [107, 125], [108, 124], [108, 126],
            [109, 125], [109, 127], [110, 126], [110, 128], [111, 127],
            [111, 129], [112, 128], [112, 130], [113, 129], [113, 131],
            [114, 130], [114, 132], [115, 131], [115, 133], [116, 132],
            [116, 134], [117, 133], [117, 135], [118, 134], [119, 136],
            [120, 137], [121, 138], [122, 139], [123, 140], [124, 141],
            [125, 142], [126, 143], [127, 144], [128, 145], [129, 146],
            [130, 147], [131, 148], [132, 149], [133, 150], [134, 151],
            [135, 152], [136, 154], [137, 153], [137, 155], [138, 154],
            [138, 156], [139, 155], [139, 157], [140, 156], [140, 158],
            [141, 157], [141, 159], [142, 158], [142, 160], [143, 159],
            [143, 161], [144, 160], [144, 162], [145, 161], [145, 163],
            [146, 162], [146, 164], [147, 163], [147, 165], [148, 164],
            [148, 166], [149, 165], [149, 167], [150, 166], [150, 168],
            [151, 167], [151, 169], [152, 168], [153, 170], [154, 171],
            [155, 172], [156, 173], [157, 174], [158, 175], [159, 176],
            [160, 177], [161, 178], [162, 179], [163, 180], [164, 181],
            [165, 182], [166, 183], [167, 184], [168, 185], [169, 186],
            [170, 188], [171, 187], [171, 189], [172, 188], [172, 190],
            [173, 189], [173, 191], [174, 190], [174, 192], [175, 191],
            [175, 193], [176, 192], [176, 194], [177, 193], [177, 195],
            [178, 194], [178, 196], [179, 195], [179, 197], [180, 196],
            [180, 198], [181, 197], [181, 199], [182, 198], [182, 200],
            [183, 199], [183, 201], [184, 200], [184, 202], [185, 201],
            [185, 203], [186, 202], [187, 204], [188, 205], [189, 206],
            [190, 207], [191, 208], [192, 209], [193, 210], [194, 211],
            [195, 212], [196, 213], [197, 214], [198, 215], [199, 216],
            [200, 217], [201, 218], [202, 219], [203, 220], [204, 222],
            [205, 221], [205, 223], [206, 222], [206, 224], [207, 223],
            [207, 225], [208, 224], [208, 226], [209, 225], [209, 227],
            [210, 226], [210, 228], [211, 227], [211, 229], [212, 228],
            [212, 230], [213, 229], [213, 231], [214, 230], [214, 232],
            [215, 231], [215, 233], [216, 232], [216, 234], [217, 233],
            [217, 235], [218, 234], [218, 236], [219, 235], [219, 237],
            [220, 236], [221, 238], [222, 239], [223, 240], [224, 241],
            [225, 242], [226, 243], [227, 244], [228, 245], [229, 246],
            [230, 247], [231, 248], [232, 249], [233, 250], [234, 251],
            [235, 252], [236, 253], [237, 254], [238, 256], [239, 255],
            [239, 257], [240, 256], [240, 258], [241, 257], [241, 259],
            [242, 258], [242, 260], [243, 259], [243, 261], [244, 260],
            [244, 262], [245, 261], [245, 263], [246, 262], [246, 264],
            [247, 263], [247, 265], [248, 264], [248, 266], [249, 265],
            [249, 267], [250, 266], [250, 268], [251, 267], [251, 269],
            [252, 268], [252, 270], [253, 269], [253, 271], [254, 270],
            [255, 272], [256, 273], [257, 274], [258, 275], [259, 276],
            [260, 277], [261, 278], [262, 279], [263, 280], [264, 281],
            [265, 282], [266, 283], [267, 284], [268, 285], [269, 286],
            [270, 287], [271, 288], [272, 290], [273, 289], [273, 291],
            [274, 290], [274, 292], [275, 291], [275, 293], [276, 292],
            [276, 294], [277, 293], [277, 295], [278, 294], [278, 296],
            [279, 295], [279, 297], [280, 296], [280, 298], [281, 297],
            [281, 299], [282, 298], [282, 300], [283, 299], [283, 301],
            [284, 300], [284, 302], [285, 301], [285, 303], [286, 302],
            [286, 304], [287, 303], [287, 305], [288, 304]
        ],

        faces: [
            [161, 145, 128, 110, 126, 143],
            [196, 180, 163, 145, 161, 178],
            [194, 178, 161, 143, 159, 176],
            [163, 147, 130, 112, 128, 145],
            [159, 143, 126, 108, 124, 141],
            [128, 112, 95, 77, 93, 110],
            [229, 213, 196, 178, 194, 211],
            [126, 110, 93, 75, 91, 108],
            [198, 182, 165, 147, 163, 180],
            [231, 215, 198, 180, 196, 213],
            [192, 176, 159, 141, 157, 174],
            [227, 211, 194, 176, 192, 209],
            [130, 114, 97, 79, 95, 112],
            [165, 149, 132, 114, 130, 147],
            [124, 108, 91, 73, 89, 106],
            [157, 141, 124, 106, 122, 139],
            [93, 77, 60, 42, 58, 75],
            [264, 248, 231, 213, 229, 246],
            [95, 79, 62, 44, 60, 77],
            [262, 246, 229, 211, 227, 244],
            [233, 217, 200, 182, 198, 215],
            [91, 75, 58, 40, 56, 73],
            [200, 184, 167, 149, 165, 182],
            [225, 209, 192, 174, 190, 207],
            [266, 250, 233, 215, 231, 248],
            [190, 174, 157, 139, 155, 172],
            [132, 116, 99, 81, 97, 114],
            [260, 244, 227, 209, 225, 242],
            [97, 81, 64, 46, 62, 79],
            [122, 106, 89, 71, 87, 104],
            [167, 151, 134, 116, 132, 149],
            [89, 73, 56, 38, 54, 71],
            [60, 44, 27, 9, 25, 42],
            [297, 281, 264, 246, 262, 279],
            [155, 139, 122, 104, 120, 137],
            [58, 42, 25, 7, 23, 40],
            [299, 283, 266, 248, 264, 281],
            [235, 219, 202, 184, 200, 217],
            [62, 46, 29, 11, 27, 44],
            [295, 279, 262, 244, 260, 277],
            [268, 252, 235, 217, 233, 250],
            [223, 207, 190, 172, 188, 205],
            [56, 40, 23, 5, 21, 38],
            [202, 186, 169, 151, 167, 184],
            [258, 242, 225, 207, 223, 240],
            [99, 83, 66, 48, 64, 81],
            [301, 285, 268, 250, 266, 283],
            [188, 172, 155, 137, 153, 170],
            [134, 118, 101, 83, 99, 116],
            [87, 71, 54, 36, 52, 69],
            [293, 277, 260, 242, 258, 275],
            [64, 48, 31, 13, 29, 46],
            [120, 104, 87, 69, 85, 102],
            [54, 38, 21, 3, 19, 36],
            [270, 254, 237, 219, 235, 252],
            [256, 240, 223, 205, 221, 238],
            [303, 287, 270, 252, 268, 285],
            [291, 275, 258, 240, 256, 273],
            [66, 50, 33, 15, 31, 48],
            [52, 36, 19, 1, 17, 34]
        ],

        numVertices: 306,

        numEdges: 424,

        numFaces: 60,

        numSides: 6,

        // cfe
        a: (v) => {

            return [v[0], v[1], (v[2] + 3 * v[3]) / 2, (v[2] - v[3]) / 2];

        },

        //cfv
        b: (v) => {

            return [v[0], v[1], v[2], -v[3]];

        },

        //fev
        c: (v) => {

            return [v[0], -v[1], v[2], v[3]];

        },

        //cev
        d: (v) => {

            if (n == 6) {

                var c = 3 / 4;

            } else {

                var c = Math.cos(Math.PI / n) ** 2;

            }

            return [
                (1 + 2 * c) * v[0] - 2 * (c ** 2) * v[1] - c * v[2] - c * v[3],
                2 * v[0] + (1 - 2 * c) * v[1] - v[2] - v[3],
                3 * v[0] - 3 * c * v[1] - v[2] / 2 - 3 * v[3] / 2,
                v[0] - c * v[1] - v[2] / 2 + v[3] / 2
            ];

        },

        e: (v) => {

            return [v[0], v[1], v[2], v[3]];

        },

        f: (v) => {

            if (n == 6) {

                return [
                    Math.sqrt(3) * v[0],
                    Math.sqrt(27 / 16) * v[1],
                    Math.sqrt(3 / 4) * v[2],
                    Math.sqrt(9 / 4) * v[3]
                ];

            } else {

                const c = Math.cos(Math.PI / n) ** 2;
                const den = Math.sqrt(Math.abs(3 - 4 * c));

                return [
                    Math.sqrt(3) * v[0] / den,
                    Math.sqrt(3) * c * v[1] / den,
                    Math.sqrt(c) * v[2] / den,
                    Math.sqrt(3 * c) * v[3] / den
                ];

            }

        },

        faceReflections: [
            '',
            'd',
            'bd',
            'abd',
            'babd',
            'ababd',
            'dbabd',
            'bababd',
            'dababd',
            'dbababd',
            'bdababd',
            'bdbababd',
            'abdababd',
            'abdbababd',
            'babdababd',
            'babdbababd',
            'ababdababd',
            'dbabdababd',
            'ababdbababd',
            'dbabdbababd',
            'dababdababd',
            'bababdbababd',
            'dababdbababd',
            'bdababdababd',
            'dbababdbababd',
            'bdababdbababd',
            'abdababdababd',
            'bdbababdbababd',
            'abdababdbababd',
            'babdababdababd',
            'abdbababdbababd',
            'babdababdbababd',
            'ababdababdababd',
            'dbabdababdababd',
            'babdbababdbababd',
            'ababdababdbababd',
            'dbabdababdbababd',
            'dababdababdababd',
            'ababdbababdbababd',
            'dbabdbababdbababd',
            'dababdababdbababd',
            'bdababdababdababd',
            'bababdbababdbababd',
            'dababdbababdbababd',
            'bdababdababdbababd',
            'abdababdababdababd',
            'dbababdbababdbababd',
            'bdababdbababdbababd',
            'abdababdababdbababd',
            'babdababdababdababd',
            'bdbababdbababdbababd',
            'abdababdbababdbababd',
            'babdababdababdbababd',
            'babdababdbababdbababd',
            'dababdababdababdababd',
            'bdababdababdababdababd',
            'dababdababdbababdbababd',
            'bdababdababdbababdbababd',
            'abdababdababdababdbababd',
            'babdababdababdababdbababd'
        ],

        outerReflection: "c",

        conversion: (v) => {

            var c = Math.cos(Math.PI / n) ** 2;
            return [1 + c * (v[1] - 8) / 6, (v[1] - 8) / 6, v[2], v[3]];

        },

        center: [1, 1, 0, 0],

        face: () => {

            if (n == 6) {

                return [1, 0, 0, 0];

            } else {

                var c = Math.cos(Math.PI / n) ** 2;
                return [Math.sqrt(Math.abs(1 - 4 * c / 3)), 0, 0, 0];

            }

        },

        // TODO what goes in the else columnn?
        metric: () => {

            if (n == 3) {

                return "hyperbolic";

            } else if (n == 4) {

                return "hyperbolic";

            } else if (n == 5) {

                return "hyperbolic";

            } else if (n == 6) {

                return "hyperbolic";

            } else {

                return "";

            }

        },

        // TODO what goes in the else columnn?
        compact: () => {

            if (n == 3) {

                return "paracompact";

            } else if (n == 4) {

                return "paracompact";

            } else if (n == 5) {

                return "paracompact";

            } else if (n == 6) {

                return "paracompact";

            } else {

                return "";

            }

        }

    }

}

export { hexagonData };

// const edges = [];
// for (var i = 0; i < hexagonData.vertices.length; i++) {
//     for (var j = i + 1; j < hexagonData.vertices.length; j++) {
//         if ((Math.abs(hexagonData.vertices[i][2] - hexagonData.vertices[j][2]) == 2) && (Math.abs(hexagonData.vertices[i][3] - hexagonData.vertices[j][3]) == 0)) {
//             edges.push([i, j]);
//         } else if ((Math.abs(hexagonData.vertices[i][2] - hexagonData.vertices[j][2]) == 1) && (Math.abs(hexagonData.vertices[i][3] - hexagonData.vertices[j][3]) == 1)) {
//             edges.push([i, j]);
//         }

//     }

// }
// console.log(edges.slice(0, 100))
// console.log(edges.slice(100, 200))
// console.log(edges.slice(200, 300))
// console.log(edges.slice(300, 400))
// console.log(edges.slice(400, 500))
// console.log(hexagonData.vertices.length)
// console.log(edges.length)
// console.log(hexagonData.faces.length)

// const numOfPoints = 4;

// function generatePoints(n) {

//     if (n == 6) {

//         var c = 3 / 4;

//     } else {

//         var c = Math.cos(Math.PI / n) ** 2;

//     }

//     var vertices = [];

//     for (var i = 1 - 3 * numOfPoints; i <= 3 * numOfPoints + 2; i++) {

//         for (var j = -2 * numOfPoints; j <= 2 * numOfPoints; j++) {

//             if (i % 3 != 0) {

//                 const x = i ** 2 + 3 * j ** 2 + 4;
//                 vertices.push([1 + c * x, x, i, j]);

//             }

//         }

//     }

//     return vertices;

// }

// function generateFaces(n, number) {
//     var faces = [];
//     var names = [""];
//     const eps = 1e-5;

//     faces.push(face(n));

//     function isIn(v) {
//         for (var i = 0; i < faces.length; i++) {
//             if (
//                 (Math.abs(v[0] - faces[i][0]) < eps) &&
//                 (Math.abs(v[1] - faces[i][1]) < eps) &&
//                 (Math.abs(v[2] - faces[i][2]) < eps) &&
//                 (Math.abs(v[3] - faces[i][3]) < eps)
//             ) {
//                 return true;
//             }
//         }
//         return false;
//     }

//     var i = 1;
//     while (i <= number) {
//         for (var j = 0; j < i; j++) {
//             if (!isIn(a(faces[j]))) {
//                 faces.push(a(faces[j]));
//                 names.push("a" + names[j]);
//             }
//             if (!isIn(b(faces[j]))) {
//                 faces.push(b(faces[j]));
//                 names.push("b" + names[j]);
//             }
//             if (!isIn(d(n, faces[j]))) {
//                 faces.push(d(n, faces[j]));
//                 names.push("d" + names[j]);
//             }
//         }
//         i = names.length;

//     }
//     return [names, faces];

// }

// var points = generatePoints(6);
// //console.log(points.slice(0, 99));
// //console.log(points.slice(99, 198));
// //console.log(points.slice(198, 297));
// //console.log(points.slice(297));
// var [names, centers] = generateFaces(6, 200);
// //console.log(names, centers)

// function generateFaceVertex() {
//     var grouping = [];
//     var newNames = [];
//     for (var i = 0; i < centers.length; i++) {
//         var corners = [];
//         for (var j = 0; j < points.length; j++) {
//             if (Math.abs(points[j][2] - centers[i][2]) + Math.abs(points[j][3] - centers[i][3]) == 2) {
//                 corners.push(j);
//             }
//         }

//         if (corners.length == 6) {
//             console.log(i, centers[i], corners);
//             corners.forEach((elem) => { console.log(elem, points[elem]) });
//             grouping.push(corners);
//             newNames.push(names[i]);
//         }
//     }

//     return [grouping, newNames];
// }

// var fauxFaces = generateFaceVertex();
// console.log(fauxFaces[1])


// function tidyFaces() {
//     var tidy = [];
//     faces.forEach((face) => {
//         console.log(face)
//         var newList = [0, 0, 0, 0, 0, 0];
//         var v1 = vertices[face[0]], v2 = vertices[face[1]], v3 = vertices[face[2]], v4 = vertices[face[3]], v5 = vertices[face[4]], v6 = vertices[face[5]];
//         var v = [v1, v2, v3, v4, v5, v6];
//         var cx = (v1[2] + v2[2] + v3[2] + v4[2] + v5[2] + v6[2]) / 6;
//         var cy = (v1[3] + v2[3] + v3[3] + v4[3] + v5[3] + v6[3]) / 6;
//         for (var i = 0; i < 6; i++) {
//             if (v[i][2] - cx == 2) {
//                 newList[0] = face[i];
//             } else if (v[i][2] - cx == -2) {
//                 newList[3] = face[i];
//             } else if (v[i][2] - cx == 1) {
//                 if (v[i][3] - cy == 1) {
//                     newList[1] = face[i];
//                 } else {
//                     newList[5] = face[i];
//                 }
//             } else if (v[i][2] - cx == -1) {
//                 if (v[i][3] - cy == 1) {
//                     newList[2] = face[i];
//                 } else {
//                     newList[4] = face[i];
//                 }
//             }
//         }
//         tidy.push(newList);

//     })
//     return tidy;
// }

// console.log(tidyFaces());
