// Order n hexagonal

const l = 3;
//const m = 7;
const n = 9;

const testData = (m) => {

    const cl = (i) => Math.cos(Math.PI * i / l);
    const cm = (i) => Math.cos(Math.PI * i / m);
    const cn = (i) => Math.cos(Math.PI * i / n);

    const sl = (i) => Math.sin(Math.PI * i / l);
    const sm = (i) => Math.sin(Math.PI * i / m);
    const sn = (i) => Math.sin(Math.PI * i / n);

    return {
        vertices: [
            [1, 0, cn(1), sn(1)],
            [1, 0, cn(3), sn(3)],
            [1, 0, cn(5), sn(5)],
            [1, 0, cn(7), sn(7)],
            [1, 0, cn(9), sn(9)],
            [1, 0, cn(11), sn(11)],
            [1, 0, cn(13), sn(13)],
            [1, 0, cn(15), sn(15)],
            [1, 0, cn(17), sn(17)],
            [1, 0, 0.939692620785908, 0.3420201433256687],
            [
                2.823826693844953,
                1.158263250001967,
                2.3793852415718173,
                0.8660254037844386
            ],
            [
                5.618091301908922,
                2.932825502667836,
                4.585122305476706,
                0.984807753012208
            ],
            [
                8.075326359286832,
                4.4933493579126385,
                6.524814926262616,
                0.6427876096865395
            ],
            [
                9.045764273505847,
                5.109648360576541,
                7.290859369381595,
                1.2246467991473532e-16
            ],
            [
                8.075326359286834,
                4.49334935791264,
                6.524814926262617,
                -0.6427876096865389
            ],
            [
                5.618091301908922,
                2.9328255026678365,
                4.585122305476706,
                -0.984807753012208
            ],
            [
                2.823826693844956,
                1.158263250001969,
                2.37938524157182,
                -0.866025403784439
            ],
            [1, 0, 0.939692620785908, -0.3420201433256686],
            [1, 0, 0.939692620785908, 0.3420201433256685],
            [
                2.823826693844953,
                1.158263250001967,
                2.379385241571817,
                0.8660254037844387
            ],
            [
                5.618091301908922,
                2.932825502667836,
                4.1454296846907965,
                2.192853300122317
            ],
            [
                8.075326359286832,
                4.4933493579126385,
                5.411474127809776,
                3.701666313593296
            ],
            [
                9.045764273505847,
                5.109648360576541,
                5.585122305476707,
                4.686474066605505
            ],
            [
                8.075326359286834,
                4.49334935791264,
                4.585122305476707,
                4.686474066605504
            ],
            [
                5.618091301908922,
                2.9328255026678365,
                2.879385241571819,
                3.7016663135932952
            ],
            [
                2.823826693844956,
                1.158263250001969,
                1.2660444431189801,
                2.1928533001223176
            ],
            [1, 0, 0.4999999999999998, 0.8660254037844383],
            [1, 0, 0.939692620785908, -0.3420201433256685],
            [
                2.823826693844953,
                1.158263250001967,
                2.379385241571817,
                -0.8660254037844387
            ],
            [
                5.618091301908922,
                2.932825502667836,
                4.1454296846907965,
                -2.192853300122317
            ],
            [
                8.075326359286832,
                4.4933493579126385,
                5.411474127809776,
                -3.701666313593296
            ],
            [
                9.045764273505847,
                5.109648360576541,
                5.585122305476707,
                -4.686474066605505
            ],
            [
                8.075326359286834,
                4.49334935791264,
                4.585122305476707,
                -4.686474066605504
            ],
            [
                5.618091301908922,
                2.9328255026678365,
                2.879385241571819,
                -3.7016663135932952
            ],
            [
                2.823826693844956,
                1.158263250001969,
                1.2660444431189801,
                -2.1928533001223176
            ],
            [1, 0, 0.4999999999999998, -0.8660254037844383],
            [1, 0, 0.4999999999999999, -0.8660254037844382],
            [
                2.823826693844953,
                1.158263250001967,
                1.266044443118978,
                -2.1928533001223154
            ],
            [
                5.618091301908922,
                2.932825502667836,
                1.7660444431189781,
                -4.3444539232798345
            ],
            [
                8.075326359286832,
                4.4933493579126385,
                1.7660444431189792,
                -6.3140694293042525
            ],
            [
                9.045764273505847,
                5.109648360576541,
                1.2660444431189792,
                -7.180094833088692
            ],
            [
                8.075326359286834,
                4.49334935791264,
                0.5000000000000018,
                -6.537307223402152
            ],
            [
                5.618091301908922,
                2.9328255026678365,
                -0.17364817766692964,
                -4.686474066605504
            ],
            [
                2.823826693844956,
                1.158263250001969,
                -0.439692620785908,
                -2.493620766483189
            ],
            [1, 0, -0.1736481776669302, -0.9848077530122075],
            [1, 0, -0.17364817766693014, -0.9848077530122075],
            [
                2.823826693844953,
                1.158263250001967,
                -0.4396926207859083,
                -2.4936207664831858
            ],
            [
                5.618091301908922,
                2.932825502667836,
                -1.439692620785909,
                -4.463236272507603
            ],
            [
                8.075326359286832,
                4.4933493579126385,
                -2.7057370639048877,
                -5.972049285978584
            ],
            [
                9.045764273505847,
                5.109648360576541,
                -3.6454296846907956,
                -6.3140694293042525
            ],
            [
                8.075326359286834,
                4.49334935791264,
                -3.8190778623577257,
                -5.329261676292044
            ],
            [
                5.618091301908922,
                2.9328255026678365,
                -3.1454296846907956,
                -3.478428519495396
            ],
            [
                2.823826693844956,
                1.158263250001969,
                -1.9396926207859098,
                -1.6275953626987498
            ],
            [1, 0, -0.7660444431189775, -0.6427876096865389],
            [1, 0, -0.7660444431189773, -0.642787609686539],
            [
                2.823826693844953,
                1.158263250001967,
                -1.939692620785908,
                -1.6275953626987472
            ],
            [
                5.618091301908922,
                2.932825502667836,
                -3.9717815070238656,
                -2.4936207664831866
            ],
            [
                8.075326359286832,
                4.4933493579126385,
                -5.911474127809775,
                -2.8356409098088573
            ],
            [
                9.045764273505847,
                5.109648360576541,
                -6.851166748595684,
                -2.493620766483189
            ],
            [
                8.075326359286834,
                4.49334935791264,
                -6.351166748595683,
                -1.62759536269875
            ],
            [
                5.618091301908922,
                2.9328255026678365,
                -4.6454296846907965,
                -0.6427876096865406
            ],
            [
                2.823826693844956,
                1.158263250001969,
                -2.5320888862379585,
                -1.1102230246251565e-15
            ],
            [1, 0, -0.9999999999999992, -5.551115123125783e-17],
            [1, 0, -0.9999999999999991, -2.7755575615628914e-16],
            [
                2.823826693844953,
                1.158263250001967,
                -2.532088886237956,
                -2.220446049250313e-16
            ],
            [
                5.618091301908922,
                2.932825502667836,
                -4.645429684690796,
                0.6427876096865393
            ],
            [
                8.075326359286832,
                4.4933493579126385,
                -6.351166748595684,
                1.627595362698747
            ],
            [
                9.045764273505847,
                5.109648360576541,
                -6.851166748595685,
                2.493620766483185
            ],
            [
                8.075326359286834,
                4.49334935791264,
                -5.911474127809775,
                2.8356409098088537
            ],
            [
                5.618091301908922,
                2.9328255026678365,
                -3.9717815070238665,
                2.4936207664831858
            ],
            [
                2.823826693844956,
                1.158263250001969,
                -1.9396926207859109,
                1.6275953626987478
            ],
            [1, 0, -0.7660444431189775, 0.6427876096865388],
            [1, 0, -0.7660444431189776, 0.6427876096865385],
            [
                2.823826693844953,
                1.158263250001967,
                -1.9396926207859084,
                1.6275953626987467
            ],
            [
                5.618091301908922,
                2.932825502667836,
                -3.1454296846907956,
                3.4784285194953943
            ],
            [
                8.075326359286832,
                4.4933493579126385,
                -3.8190778623577275,
                5.329261676292042
            ],
            [
                9.045764273505847,
                5.109648360576541,
                -3.645429684690799,
                6.31406942930425
            ],
            [
                8.075326359286834,
                4.49334935791264,
                -2.7057370639048894,
                5.9720492859785805
            ],
            [
                5.618091301908922,
                2.9328255026678365,
                -1.4396926207859102,
                4.4632362725076025
            ],
            [
                2.823826693844956,
                1.158263250001969,
                -0.4396926207859102,
                2.493620766483188
            ],
            [1, 0, -0.17364817766693025, 0.9848077530122072],
            [1, 0, -0.17364817766693058, 0.984807753012207],
            [
                2.823826693844953,
                1.158263250001967,
                -0.43969262078590887,
                2.4936207664831853
            ],
            [
                5.618091301908922,
                2.932825502667836,
                -0.17364817766693097,
                4.686474066605502
            ],
            [
                8.075326359286832,
                4.4933493579126385,
                0.4999999999999982,
                6.53730722340215
            ],
            [
                9.045764273505847,
                5.109648360576541,
                1.2660444431189748,
                7.18009483308869
            ],
            [
                8.075326359286834,
                4.49334935791264,
                1.7660444431189757,
                6.314069429304251
            ],
            [
                5.618091301908922,
                2.9328255026678365,
                1.7660444431189768,
                4.344453923279834
            ],
            [
                2.823826693844956,
                1.158263250001969,
                1.2660444431189777,
                2.192853300122318
            ],
            [1, 0, 0.49999999999999944, 0.8660254037844379]
        ],

        edges: [
            [0, 1], [1, 2],
            [2, 3], [3, 4],
            [4, 5], [5, 6],
            [6, 7], [7, 8],
            [8, 0],
            [9, 10], [10, 11],
            [11, 12], [12, 13],
            [13, 14], [14, 15],
            [15, 16], [16, 17],
            [17, 9],
            [18, 19], [19, 20],
            [20, 21], [21, 22],
            [22, 23], [23, 24],
            [24, 25], [25, 26],
            [26, 18],
            [27, 28], [28, 29],
            [29, 30], [30, 31],
            [31, 32], [32, 33],
            [33, 34], [34, 35],
            [35, 27],
            [36, 37], [37, 38],
            [38, 39], [39, 40],
            [40, 41], [41, 42],
            [42, 43], [43, 44],
            [44, 36],
            [45, 46], [46, 47],
            [47, 48], [48, 49],
            [49, 50], [50, 51],
            [51, 52], [52, 53],
            [53, 45],
            [54, 55], [55, 56],
            [56, 57], [57, 58],
            [58, 59], [59, 60],
            [60, 61], [61, 62],
            [62, 54],
            [63, 64], [64, 65],
            [65, 66], [66, 67],
            [67, 68], [68, 69],
            [69, 70], [70, 71],
            [71, 63],
            [72, 73], [73, 74],
            [74, 75], [75, 76],
            [76, 77], [77, 78],
            [78, 79], [79, 80],
            [80, 72],
            [81, 82], [82, 83],
            [83, 84], [84, 85],
            [85, 86], [86, 87],
            [87, 88], [88, 89],
            [89, 81]
        ],

        faces: [
            [
                0, 1, 2, 3, 4,
                5, 6, 7, 8
            ],
            [
                9, 10, 11, 12, 13,
                14, 15, 16, 17
            ],
            [
                18, 19, 20, 21, 22,
                23, 24, 25, 26
            ],
            [
                27, 28, 29, 30, 31,
                32, 33, 34, 35
            ],
            [
                36, 37, 38, 39, 40,
                41, 42, 43, 44
            ],
            [
                45, 46, 47, 48, 49,
                50, 51, 52, 53
            ],
            [
                54, 55, 56, 57, 58,
                59, 60, 61, 62
            ],
            [
                63, 64, 65, 66, 67,
                68, 69, 70, 71
            ],
            [
                72, 73, 74, 75, 76,
                77, 78, 79, 80
            ],
            [
                81, 82, 83, 84, 85,
                86, 87, 88, 89
            ]
        ],

        numVertices: 90,

        numEdges: 90,

        numFaces: 10,

        numSides: 9,

        // cfe
        a: (v) => {

            return [v[0], v[1], v[2], -v[3]];

        },

        //cfv
        b: (v) => {

            const c = cn(2);
            const s = sn(2);

            return [v[0], v[1], c * v[2] + s * v[3], s * v[2] - c * v[3]];

        },

        //cev
        c: (v) => {

            const clc = cl(1);
            const smc = sm(1);
            const snc = sn(1);
            const cnc = cn(1);
            const cmc = cm(1);

            const r = smc ** 2 * snc ** 2 - clc ** 2;
            // return v;
            return [
                (1 - 2 * r / (snc ** 2)) * v[0] + (2 * r * cmc / (snc * cnc * clc)) * v[1] + (2 * r / (cnc * (snc ** 2))) * v[2],
                (2 * cnc * clc * cmc / snc) * v[0] + (1 - 2 * (cmc ** 2)) * v[1] - (2 * cmc * clc / snc) * v[2],
                (2 * cnc * (clc) ** 2 / (snc ** 2)) * v[0] - (2 * cmc * clc / snc) * v[1] + (1 - 2 * (clc ** 2) / (snc ** 2)) * v[2],
                v[3]
            ];

        },

        // fev
        d: (v) => {

            return [v[0], -v[1], v[2], v[3]];

        },

        e: (v) => {

            return v;

        },

        f: (v) => {

            const den = sn(1) * Math.sqrt(Math.abs(sm(1) ** 2 - cl(1) ** 2));

            return [
                cn(1) * cl(1) * v[0] / den,
                Math.sqrt(Math.abs(sn(1) ** 2 * sm(1) ** 2 - cl(1) ** 2)) * v[1] / den,
                Math.sqrt(Math.abs(sn(1) ** 2 * sm(1) ** 2 - cl(1) ** 2)) * v[2] / den,
                Math.sqrt(Math.abs(sn(1) ** 2 * sm(1) ** 2 - cl(1) ** 2)) * v[3] / den
            ];

        },

        faceReflections: [
            "",
            "c",
            "dc"
        ],

        // outerReflection: "c",

        // center: [1, 1, 0, 0],

        // face: () => {

        //     if (n == 6) {

        //         return [1, 0, 0, 0];

        //     } else {

        //         var c = Math.cos(Math.PI / n) ** 2;
        //         return [Math.sqrt(Math.abs(1 - 4 * c / 3)), 0, 0, 0];

        //     }

        // },

        // TODO what goes in the else columnn?
        metric: () => {

            return "hyperbolic";

        },

        // TODO what goes in the else columnn?
        compact: () => {

            if ((l - 2) * (m - 2) < 4) {

                return "compact";

            } else if ((l - 2) * (m - 2) == 4) {

                return "paracompact";

            } else {

                return "uncompact";

            }

        },

        // cellType: "euclidean",

        flip: (v) => {

            return [v[0], v[2], v[3], v[1]];

        },

        cellType: "hyperbolic",

        conversion: (v) => {

            return v;

        }

    }

}

export { testData };

// const data = testData(7);

// var newVerts = []

// for (var j = 0; j < 10; j++) {
//     console.log([[9 * j, 9 * j + 1], [9 * j + 1, 9 * j + 2], [9 * j + 2, 9 * j + 3], [9 * j + 3, 9 * j + 4], [9 * j + 4, 9 * j + 5], [9 * j + 5, 9 * j + 6], [9 * j + 6, 9 * j + 7], [9 * j + 7, 9 * j + 8], [9 * j + 8, 9 * j + 0]])
// }

// for (var i = 81; i < 90; i++) {
//     newVerts.push(data.a(data.b(data.vertices[i])))
// }

// console.log(newVerts)
// var usedVerts = [];

// for (var i = 0; i < data.numFaces; i++) {
//     data.faces[i].forEach((num) => {
//         console.log(num)
//         if (!usedVerts.includes(num)) {
//             usedVerts.push(num);
//         }
//     })
// }

// usedVerts.sort((a, b) => a - b);

// // console.log(usedVerts, usedVerts.length)

// var newVerts = [];
// usedVerts.forEach((num) => {
//     newVerts.push(data.vertices[num]);
// })
// //console.log(newVerts.slice(0, 99))
// //console.log(newVerts.slice(99, 200))

// var newEdges = [];
// data.edges.forEach((edge) => {
//     var newEdge = [usedVerts.indexOf(edge[0]), usedVerts.indexOf(edge[1])];
//     if ((newEdge[0] !== -1) && newEdge[1] !== -1) {
//         newEdges.push(newEdge)
//     }
// })

// console.log(newEdges.slice(0, 100));
// console.log(newEdges.slice(100, 200));
// console.log(newEdges.slice(200, 300));

// var newFaces = [];
// data.faces.forEach((face) => {
//     newFaces.push([
//         usedVerts.indexOf(face[0]),
//         usedVerts.indexOf(face[1]),
//         usedVerts.indexOf(face[2]),
//         usedVerts.indexOf(face[3]),
//         usedVerts.indexOf(face[4]),
//         usedVerts.indexOf(face[5])
//     ]);
// })

// console.log(newFaces);


// const edges = [];
// for (var i = 0; i < data.vertices.length; i++) {
//     for (var j = i + 1; j < data.vertices.length; j++) {
//         if ((Math.abs(data.vertices[i][2] - data.vertices[j][2]) == 2) && (Math.abs(data.vertices[i][3] - data.vertices[j][3]) == 0)) {
//             edges.push([i, j]);
//         } else if ((Math.abs(data.vertices[i][2] - data.vertices[j][2]) == 1) && (Math.abs(data.vertices[i][3] - data.vertices[j][3]) == 1)) {
//             edges.push([i, j]);
//         }

//     }

// }
// console.log(edges.slice(0, 100))
// console.log(edges.slice(100, 200))
// console.log(edges.slice(200, 300))
// console.log(edges.slice(300, 400))
// console.log(edges.slice(400, 500))
// console.log(hexagonData.vertices.length)
// console.log(edges.length)
// console.log(hexagonData.faces.length)

// const numOfPoints = 4;

// function generatePoints(n) {

//     if (n == 6) {

//         var c = 3 / 4;

//     } else {

//         var c = Math.cos(Math.PI / n) ** 2;

//     }

//     var vertices = [];

//     for (var i = 1 - 3 * numOfPoints; i <= 3 * numOfPoints + 2; i++) {

//         for (var j = -2 * numOfPoints; j <= 2 * numOfPoints; j++) {

//             if (i % 3 != 0) {

//                 const x = i ** 2 + 3 * j ** 2 + 4;
//                 vertices.push([1 + c * x, x, i, j]);

//             }

//         }

//     }

//     return vertices;

// }

// function generateFaces(n, number) {
//     var faces = [];
//     var names = [""];
//     const eps = 1e-5;

//     faces.push(face(n));

//     function isIn(v) {
//         for (var i = 0; i < faces.length; i++) {
//             if (
//                 (Math.abs(v[0] - faces[i][0]) < eps) &&
//                 (Math.abs(v[1] - faces[i][1]) < eps) &&
//                 (Math.abs(v[2] - faces[i][2]) < eps) &&
//                 (Math.abs(v[3] - faces[i][3]) < eps)
//             ) {
//                 return true;
//             }
//         }
//         return false;
//     }

//     var i = 1;
//     while (i <= number) {
//         for (var j = 0; j < i; j++) {
//             if (!isIn(a(faces[j]))) {
//                 faces.push(a(faces[j]));
//                 names.push("a" + names[j]);
//             }
//             if (!isIn(b(faces[j]))) {
//                 faces.push(b(faces[j]));
//                 names.push("b" + names[j]);
//             }
//             if (!isIn(d(n, faces[j]))) {
//                 faces.push(d(n, faces[j]));
//                 names.push("d" + names[j]);
//             }
//         }
//         i = names.length;

//     }
//     return [names, faces];

// }

// var points = generatePoints(6);
// //console.log(points.slice(0, 99));
// //console.log(points.slice(99, 198));
// //console.log(points.slice(198, 297));
// //console.log(points.slice(297));
// var [names, centers] = generateFaces(6, 200);
// //console.log(names, centers)

// function generateFaceVertex() {
//     var grouping = [];
//     var newNames = [];
//     for (var i = 0; i < centers.length; i++) {
//         var corners = [];
//         for (var j = 0; j < points.length; j++) {
//             if (Math.abs(points[j][2] - centers[i][2]) + Math.abs(points[j][3] - centers[i][3]) == 2) {
//                 corners.push(j);
//             }
//         }

//         if (corners.length == 6) {
//             console.log(i, centers[i], corners);
//             corners.forEach((elem) => { console.log(elem, points[elem]) });
//             grouping.push(corners);
//             newNames.push(names[i]);
//         }
//     }

//     return [grouping, newNames];
// }

// var fauxFaces = generateFaceVertex();
// console.log(fauxFaces[1])


// function tidyFaces() {
//     var tidy = [];
//     data.faces.forEach((face) => {
//         console.log(face)
//         var newList = [0, 0, 0, 0, 0, 0];
//         var v1 = data.vertices[face[0]], v2 = data.vertices[face[1]], v3 = data.vertices[face[2]], v4 = data.vertices[face[3]], v5 = data.vertices[face[4]], v6 = data.vertices[face[5]];
//         var v = [v1, v2, v3, v4, v5, v6];
//         var cx = (v1[2] + v2[2] + v3[2] + v4[2] + v5[2] + v6[2]) / 6;
//         var cy = (v1[3] + v2[3] + v3[3] + v4[3] + v5[3] + v6[3]) / 6;
//         for (var i = 0; i < 6; i++) {
//             if (v[i][2] - cx == 2) {
//                 newList[0] = face[i];
//             } else if (v[i][2] - cx == -2) {
//                 newList[3] = face[i];
//             } else if (v[i][2] - cx == 1) {
//                 if (v[i][3] - cy == 1) {
//                     newList[1] = face[i];
//                 } else {
//                     newList[5] = face[i];
//                 }
//             } else if (v[i][2] - cx == -1) {
//                 if (v[i][3] - cy == 1) {
//                     newList[2] = face[i];
//                 } else {
//                     newList[4] = face[i];
//                 }
//             }
//         }
//         tidy.push(newList);

//     })
//     return tidy;
// }

// console.log(tidyFaces());
