import numpy as np

# cycles = [[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]]
# evenperm = [[1, 2, 3, 4], [1, 3, 4, 2], [1, 4, 2, 3],
#             [2, 1, 4, 3], [2, 3, 1, 4], [2, 4, 3, 1],
#             [3, 1, 2, 4], [3, 2, 4, 1], [3, 4, 1, 2],
#             [4, 1, 3, 2], [4, 2, 1, 3], [4, 3, 2, 1]]

# seed1 = ['1 / 2', '1 / 2', '1 / 2', '1 / 2']
# seed2 = ['0', '0', '0', '1']
# seed3 = ['0', '0', '0', '-1']
# seed4 = ['1 / 2', 'p / 2', '1 / (2 * p)', '0']

# f = open("/Users/calummccain/Documents/maths-website/maths-websiite/root/js/data/polychorons/120-cell.txt", "a")

# n = 0

# for i in range(16):
#     vert = '"' + (3 - len(str(n)))*'0' + str(n) + '"'
#     x = (4 - len(bin(i)[2:]))*'0' + bin(i)[2:]
#     vert += ': ['
#     for j in range(4):
#         if x[j] == '0':
#             vert += seed1[j]
#         else:
#             vert += '-' + seed1[j]
#         if j != 3:
#             vert += ', '
#     vert += '],\n'
#     f.write(vert)
#     n += 1

# for perm in cycles:
#     f.write('"' + (3 - len(str(n)))*'0' + str(n) + '": [' +
#             seed2[perm[0] - 1] + ', ' + seed2[perm[1] - 1] + ', ' +
#             seed2[perm[2] - 1] + ', ' + seed2[perm[3] - 1] + '],\n')
#     n += 1
#     f.write('"' + (3 - len(str(n)))*'0' + str(n) + '": [' +
#             seed3[perm[0] - 1] + ', ' + seed3[perm[1] - 1] + ', ' +
#             seed3[perm[2] - 1] + ', ' + seed3[perm[3] - 1] + '],\n')
#     n += 1

# for i in range(8):
#     x = (3 - len(bin(i)[2:]))*'0' + bin(i)[2:]
#     seed33 = []
#     for j in range(3):
#         if x[j] == '0':
#             seed33.append(seed4[j])
#         else:
#             seed33.append('-' + seed4[j])
#     seed33.append('0')
#     for perm in evenperm:
#         vert = '"' + ((3 - len(str(n)))*'0' + str(n) + '": [' + seed33[perm[0] - 1] + ', ' +
#                       seed33[perm[1] - 1] + ', ' + seed33[perm[2] - 1] + ', ' + seed33[perm[3] - 1] + '],\n')
#         f.write(vert)
#         n += 1

# # lines_600 = []

# # """
# # for x in range(120):
# #     for y in range(x + 1, 120):
# #         dist = np.subtract(points_600[x], points_600[y])
# #         if abs(np.linalg.norm(dist) - 1/p) < 0.0001:
# #             lines_600.append([x, y])
# # """

# f.write('\n\n\n')

# seed5 = ['0', '0', '2', '2']
# seed6 = ['1', '1', '1', '(2 * p - 1)']
# seed7 = ['p', 'p', 'p', '1 / (p ** 2)']
# seed8 = ['1 / p', '1 / p', '1 / p', '(p ** 2)']

# seed9 = ['0', '1 / (p ** 2)', '1', '(p ** 2)']
# seed10 = ['0', '1 / p', 'p', '(2 * p - 1)']
# seed11 = ['1 / p', '1', 'p', '2']

# f.write('"000": [0, 0, 2, 2],\n')
# f.write('"001": [0, 0, 2, -2],\n')
# f.write('"002": [0, 0, -2, 2],\n')
# f.write('"003": [0, 0, -2, -2],\n')
# f.write('"004": [0, 2, 0, 2],\n')
# f.write('"005": [0, 2, 0, -2],\n')
# f.write('"006": [0, -2, 0, 2],\n')
# f.write('"007": [0, -2, 0, -2],\n')
# f.write('"008": [2, 0, 2, 0],\n')
# f.write('"009": [2, 0, -2, 0],\n')
# f.write('"010": [-2, 0, 2, 0],\n')
# f.write('"011": [-2, 0, -2, 0],\n')
# f.write('"012": [2, 0, 0, 2],\n')
# f.write('"013": [2, 0, 0, -2],\n')
# f.write('"014": [-2, 0, 0, 2],\n')
# f.write('"015": [-2, 0, 0, -2],\n')
# f.write('"016": [0, 2, 2, 0],\n')
# f.write('"017": [0, 2, -2, 0],\n')
# f.write('"018": [0, -2, 2, 0],\n')
# f.write('"019": [0, -2, -2, 0],\n')
# f.write('"020": [2, 2, 0, 0],\n')
# f.write('"021": [2, -2, 0, 0],\n')
# f.write('"022": [-2, 2, 0, 0],\n')
# f.write('"023": [-2, -2, 0, 0],\n')

# m = 24

# for x in [seed6, seed7, seed8]:
#     for perm in cycles:
#         w = [x[perm[0] - 1], x[perm[1] - 1], x[perm[2] - 1], x[perm[3] - 1]]
#         for i in range(16):
#             y = (4 - len(bin(i)[2:]))*'0' + bin(i)[2:]
#             vert = '"' + (3 - len(str(m)))*'0' + str(m) + '"' + ': ['
#             for j in range(4):
#                 if y[j] == '0':
#                     vert += w[j]
#                 else:
#                     vert += '-' + w[j]
#                 if j != 3:
#                     vert += ', '
#             vert += '],\n'
#             f.write(vert)
#             m += 1

# for y in [seed9, seed10]:
#     for i in range(8):
#         x = (3 - len(bin(i)[2:]))*'0' + bin(i)[2:]
#         v = ['0']
#         for j in range(3):
#             if x[j] == '0':
#                 v.append(y[j + 1])
#             else:
#                 v.append('-' + y[j + 1])
#         for perm in evenperm:
#             vert = '"' + ((3 - len(str(m)))*'0' + str(m) + '": [' + v[perm[0] - 1] + ', ' +
#                           v[perm[1] - 1] + ', ' + v[perm[2] - 1] + ', ' + v[perm[3] - 1] + '],\n')
#             f.write(vert)
#             m += 1

# for y in [seed11]:
#     for i in range(16):
#         x = (4 - len(bin(i)[2:]))*'0' + bin(i)[2:]
#         v = []
#         for j in range(4):
#             if x[j] == '0':
#                 v.append(y[j])
#             else:
#                 v.append('-' + y[j])
#         for perm in evenperm:
#             vert = '"' + ((3 - len(str(m)))*'0' + str(m) + '": [' + v[perm[0] - 1] + ', ' +
#                           v[perm[1] - 1] + ', ' + v[perm[2] - 1] + ', ' + v[perm[3] - 1] + '],\n')
#             f.write(vert)
#             m += 1

# f.write('\n\n\n\n')

# for i in range(75):
#     f.write('"' + (3 - len(str(8 * i)))*'0' + str(8 * i) + '", ' +
#             '"' + (3 - len(str(8 * i + 1)))*'0' + str(8 * i + 1) + '", ' +
#             '"' + (3 - len(str(8 * i + 2)))*'0' + str(8 * i + 2) + '", ' +
#             '"' + (3 - len(str(8 * i + 3)))*'0' + str(8 * i + 3) + '", ' +
#             '"' + (3 - len(str(8 * i + 4)))*'0' + str(8 * i + 4) + '", ' +
#             '"' + (3 - len(str(8 * i + 5)))*'0' + str(8 * i + 5) + '", ' +
#             '"' + (3 - len(str(8 * i + 6)))*'0' + str(8 * i + 6) + '", ' +
#             '"' + (3 - len(str(8 * i + 7)))*'0' + str(8 * i + 7) + '",\n')

p = (1 + np.sqrt(5)) / 2

verts = {"000": [0, 0, 2, 2],
         "001": [0, 0, 2, -2],
         "002": [0, 0, -2, 2],
         "003": [0, 0, -2, -2],
         "004": [0, 2, 0, 2],
         "005": [0, 2, 0, -2],
         "006": [0, -2, 0, 2],
         "007": [0, -2, 0, -2],
         "008": [2, 0, 2, 0],
         "009": [2, 0, -2, 0],
         "010": [-2, 0, 2, 0],
         "011": [-2, 0, -2, 0],
         "012": [2, 0, 0, 2],
         "013": [2, 0, 0, -2],
         "014": [-2, 0, 0, 2],
         "015": [-2, 0, 0, -2],
         "016": [0, 2, 2, 0],
         "017": [0, 2, -2, 0],
         "018": [0, -2, 2, 0],
         "019": [0, -2, -2, 0],
         "020": [2, 2, 0, 0],
         "021": [2, -2, 0, 0],
         "022": [-2, 2, 0, 0],
         "023": [-2, -2, 0, 0],
         "024": [1, 1, 1, (2 * p - 1)],
         "025": [1, 1, 1, -(2 * p - 1)],
         "026": [1, 1, -1, (2 * p - 1)],
         "027": [1, 1, -1, -(2 * p - 1)],
         "028": [1, -1, 1, (2 * p - 1)],
         "029": [1, -1, 1, -(2 * p - 1)],
         "030": [1, -1, -1, (2 * p - 1)],
         "031": [1, -1, -1, -(2 * p - 1)],
         "032": [-1, 1, 1, (2 * p - 1)],
         "033": [-1, 1, 1, -(2 * p - 1)],
         "034": [-1, 1, -1, (2 * p - 1)],
         "035": [-1, 1, -1, -(2 * p - 1)],
         "036": [-1, -1, 1, (2 * p - 1)],
         "037": [-1, -1, 1, -(2 * p - 1)],
         "038": [-1, -1, -1, (2 * p - 1)],
         "039": [-1, -1, -1, -(2 * p - 1)],
         "040": [1, 1, (2 * p - 1), 1],
         "041": [1, 1, (2 * p - 1), -1],
         "042": [1, 1, -(2 * p - 1), 1],
         "043": [1, 1, -(2 * p - 1), -1],
         "044": [1, -1, (2 * p - 1), 1],
         "045": [1, -1, (2 * p - 1), -1],
         "046": [1, -1, -(2 * p - 1), 1],
         "047": [1, -1, -(2 * p - 1), -1],
         "048": [-1, 1, (2 * p - 1), 1],
         "049": [-1, 1, (2 * p - 1), -1],
         "050": [-1, 1, -(2 * p - 1), 1],
         "051": [-1, 1, -(2 * p - 1), -1],
         "052": [-1, -1, (2 * p - 1), 1],
         "053": [-1, -1, (2 * p - 1), -1],
         "054": [-1, -1, -(2 * p - 1), 1],
         "055": [-1, -1, -(2 * p - 1), -1],
         "056": [1, (2 * p - 1), 1, 1],
         "057": [1, (2 * p - 1), 1, -1],
         "058": [1, (2 * p - 1), -1, 1],
         "059": [1, (2 * p - 1), -1, -1],
         "060": [1, -(2 * p - 1), 1, 1],
         "061": [1, -(2 * p - 1), 1, -1],
         "062": [1, -(2 * p - 1), -1, 1],
         "063": [1, -(2 * p - 1), -1, -1],
         "064": [-1, (2 * p - 1), 1, 1],
         "065": [-1, (2 * p - 1), 1, -1],
         "066": [-1, (2 * p - 1), -1, 1],
         "067": [-1, (2 * p - 1), -1, -1],
         "068": [-1, -(2 * p - 1), 1, 1],
         "069": [-1, -(2 * p - 1), 1, -1],
         "070": [-1, -(2 * p - 1), -1, 1],
         "071": [-1, -(2 * p - 1), -1, -1],
         "072": [(2 * p - 1), 1, 1, 1],
         "073": [(2 * p - 1), 1, 1, -1],
         "074": [(2 * p - 1), 1, -1, 1],
         "075": [(2 * p - 1), 1, -1, -1],
         "076": [(2 * p - 1), -1, 1, 1],
         "077": [(2 * p - 1), -1, 1, -1],
         "078": [(2 * p - 1), -1, -1, 1],
         "079": [(2 * p - 1), -1, -1, -1],
         "080": [-(2 * p - 1), 1, 1, 1],
         "081": [-(2 * p - 1), 1, 1, -1],
         "082": [-(2 * p - 1), 1, -1, 1],
         "083": [-(2 * p - 1), 1, -1, -1],
         "084": [-(2 * p - 1), -1, 1, 1],
         "085": [-(2 * p - 1), -1, 1, -1],
         "086": [-(2 * p - 1), -1, -1, 1],
         "087": [-(2 * p - 1), -1, -1, -1],
         "088": [p, p, p, 1 / (p ** 2)],
         "089": [p, p, p, -1 / (p ** 2)],
         "090": [p, p, -p, 1 / (p ** 2)],
         "091": [p, p, -p, -1 / (p ** 2)],
         "092": [p, -p, p, 1 / (p ** 2)],
         "093": [p, -p, p, -1 / (p ** 2)],
         "094": [p, -p, -p, 1 / (p ** 2)],
         "095": [p, -p, -p, -1 / (p ** 2)],
         "096": [-p, p, p, 1 / (p ** 2)],
         "097": [-p, p, p, -1 / (p ** 2)],
         "098": [-p, p, -p, 1 / (p ** 2)],
         "099": [-p, p, -p, -1 / (p ** 2)],
         "100": [-p, -p, p, 1 / (p ** 2)],
         "101": [-p, -p, p, -1 / (p ** 2)],
         "102": [-p, -p, -p, 1 / (p ** 2)],
         "103": [-p, -p, -p, -1 / (p ** 2)],
         "104": [p, p, 1 / (p ** 2), p],
         "105": [p, p, 1 / (p ** 2), -p],
         "106": [p, p, -1 / (p ** 2), p],
         "107": [p, p, -1 / (p ** 2), -p],
         "108": [p, -p, 1 / (p ** 2), p],
         "109": [p, -p, 1 / (p ** 2), -p],
         "110": [p, -p, -1 / (p ** 2), p],
         "111": [p, -p, -1 / (p ** 2), -p],
         "112": [-p, p, 1 / (p ** 2), p],
         "113": [-p, p, 1 / (p ** 2), -p],
         "114": [-p, p, -1 / (p ** 2), p],
         "115": [-p, p, -1 / (p ** 2), -p],
         "116": [-p, -p, 1 / (p ** 2), p],
         "117": [-p, -p, 1 / (p ** 2), -p],
         "118": [-p, -p, -1 / (p ** 2), p],
         "119": [-p, -p, -1 / (p ** 2), -p],
         "120": [p, 1 / (p ** 2), p, p],
         "121": [p, 1 / (p ** 2), p, -p],
         "122": [p, 1 / (p ** 2), -p, p],
         "123": [p, 1 / (p ** 2), -p, -p],
         "124": [p, -1 / (p ** 2), p, p],
         "125": [p, -1 / (p ** 2), p, -p],
         "126": [p, -1 / (p ** 2), -p, p],
         "127": [p, -1 / (p ** 2), -p, -p],
         "128": [-p, 1 / (p ** 2), p, p],
         "129": [-p, 1 / (p ** 2), p, -p],
         "130": [-p, 1 / (p ** 2), -p, p],
         "131": [-p, 1 / (p ** 2), -p, -p],
         "132": [-p, -1 / (p ** 2), p, p],
         "133": [-p, -1 / (p ** 2), p, -p],
         "134": [-p, -1 / (p ** 2), -p, p],
         "135": [-p, -1 / (p ** 2), -p, -p],
         "136": [1 / (p ** 2), p, p, p],
         "137": [1 / (p ** 2), p, p, -p],
         "138": [1 / (p ** 2), p, -p, p],
         "139": [1 / (p ** 2), p, -p, -p],
         "140": [1 / (p ** 2), -p, p, p],
         "141": [1 / (p ** 2), -p, p, -p],
         "142": [1 / (p ** 2), -p, -p, p],
         "143": [1 / (p ** 2), -p, -p, -p],
         "144": [-1 / (p ** 2), p, p, p],
         "145": [-1 / (p ** 2), p, p, -p],
         "146": [-1 / (p ** 2), p, -p, p],
         "147": [-1 / (p ** 2), p, -p, -p],
         "148": [-1 / (p ** 2), -p, p, p],
         "149": [-1 / (p ** 2), -p, p, -p],
         "150": [-1 / (p ** 2), -p, -p, p],
         "151": [-1 / (p ** 2), -p, -p, -p],
         "152": [1 / p, 1 / p, 1 / p, (p ** 2)],
         "153": [1 / p, 1 / p, 1 / p, -(p ** 2)],
         "154": [1 / p, 1 / p, -1 / p, (p ** 2)],
         "155": [1 / p, 1 / p, -1 / p, -(p ** 2)],
         "156": [1 / p, -1 / p, 1 / p, (p ** 2)],
         "157": [1 / p, -1 / p, 1 / p, -(p ** 2)],
         "158": [1 / p, -1 / p, -1 / p, (p ** 2)],
         "159": [1 / p, -1 / p, -1 / p, -(p ** 2)],
         "160": [-1 / p, 1 / p, 1 / p, (p ** 2)],
         "161": [-1 / p, 1 / p, 1 / p, -(p ** 2)],
         "162": [-1 / p, 1 / p, -1 / p, (p ** 2)],
         "163": [-1 / p, 1 / p, -1 / p, -(p ** 2)],
         "164": [-1 / p, -1 / p, 1 / p, (p ** 2)],
         "165": [-1 / p, -1 / p, 1 / p, -(p ** 2)],
         "166": [-1 / p, -1 / p, -1 / p, (p ** 2)],
         "167": [-1 / p, -1 / p, -1 / p, -(p ** 2)],
         "168": [1 / p, 1 / p, (p ** 2), 1 / p],
         "169": [1 / p, 1 / p, (p ** 2), -1 / p],
         "170": [1 / p, 1 / p, -(p ** 2), 1 / p],
         "171": [1 / p, 1 / p, -(p ** 2), -1 / p],
         "172": [1 / p, -1 / p, (p ** 2), 1 / p],
         "173": [1 / p, -1 / p, (p ** 2), -1 / p],
         "174": [1 / p, -1 / p, -(p ** 2), 1 / p],
         "175": [1 / p, -1 / p, -(p ** 2), -1 / p],
         "176": [-1 / p, 1 / p, (p ** 2), 1 / p],
         "177": [-1 / p, 1 / p, (p ** 2), -1 / p],
         "178": [-1 / p, 1 / p, -(p ** 2), 1 / p],
         "179": [-1 / p, 1 / p, -(p ** 2), -1 / p],
         "180": [-1 / p, -1 / p, (p ** 2), 1 / p],
         "181": [-1 / p, -1 / p, (p ** 2), -1 / p],
         "182": [-1 / p, -1 / p, -(p ** 2), 1 / p],
         "183": [-1 / p, -1 / p, -(p ** 2), -1 / p],
         "184": [1 / p, (p ** 2), 1 / p, 1 / p],
         "185": [1 / p, (p ** 2), 1 / p, -1 / p],
         "186": [1 / p, (p ** 2), -1 / p, 1 / p],
         "187": [1 / p, (p ** 2), -1 / p, -1 / p],
         "188": [1 / p, -(p ** 2), 1 / p, 1 / p],
         "189": [1 / p, -(p ** 2), 1 / p, -1 / p],
         "190": [1 / p, -(p ** 2), -1 / p, 1 / p],
         "191": [1 / p, -(p ** 2), -1 / p, -1 / p],
         "192": [-1 / p, (p ** 2), 1 / p, 1 / p],
         "193": [-1 / p, (p ** 2), 1 / p, -1 / p],
         "194": [-1 / p, (p ** 2), -1 / p, 1 / p],
         "195": [-1 / p, (p ** 2), -1 / p, -1 / p],
         "196": [-1 / p, -(p ** 2), 1 / p, 1 / p],
         "197": [-1 / p, -(p ** 2), 1 / p, -1 / p],
         "198": [-1 / p, -(p ** 2), -1 / p, 1 / p],
         "199": [-1 / p, -(p ** 2), -1 / p, -1 / p],
         "200": [(p ** 2), 1 / p, 1 / p, 1 / p],
         "201": [(p ** 2), 1 / p, 1 / p, -1 / p],
         "202": [(p ** 2), 1 / p, -1 / p, 1 / p],
         "203": [(p ** 2), 1 / p, -1 / p, -1 / p],
         "204": [(p ** 2), -1 / p, 1 / p, 1 / p],
         "205": [(p ** 2), -1 / p, 1 / p, -1 / p],
         "206": [(p ** 2), -1 / p, -1 / p, 1 / p],
         "207": [(p ** 2), -1 / p, -1 / p, -1 / p],
         "208": [-(p ** 2), 1 / p, 1 / p, 1 / p],
         "209": [-(p ** 2), 1 / p, 1 / p, -1 / p],
         "210": [-(p ** 2), 1 / p, -1 / p, 1 / p],
         "211": [-(p ** 2), 1 / p, -1 / p, -1 / p],
         "212": [-(p ** 2), -1 / p, 1 / p, 1 / p],
         "213": [-(p ** 2), -1 / p, 1 / p, -1 / p],
         "214": [-(p ** 2), -1 / p, -1 / p, 1 / p],
         "215": [-(p ** 2), -1 / p, -1 / p, -1 / p],
         "216": [0, 1 / (p ** 2), 1, (p ** 2)],
         "217": [0, 1, (p ** 2), 1 / (p ** 2)],
         "218": [0, (p ** 2), 1 / (p ** 2), 1],
         "219": [1 / (p ** 2), 0, (p ** 2), 1],
         "220": [1 / (p ** 2), 1, 0, (p ** 2)],
         "221": [1 / (p ** 2), (p ** 2), 1, 0],
         "222": [1, 0, 1 / (p ** 2), (p ** 2)],
         "223": [1, 1 / (p ** 2), (p ** 2), 0],
         "224": [1, (p ** 2), 0, 1 / (p ** 2)],
         "225": [(p ** 2), 0, 1, 1 / (p ** 2)],
         "226": [(p ** 2), 1 / (p ** 2), 0, 1],
         "227": [(p ** 2), 1, 1 / (p ** 2), 0],
         "228": [0, 1 / (p ** 2), 1, -(p ** 2)],
         "229": [0, 1, -(p ** 2), 1 / (p ** 2)],
         "230": [0, -(p ** 2), 1 / (p ** 2), 1],
         "231": [1 / (p ** 2), 0, -(p ** 2), 1],
         "232": [1 / (p ** 2), 1, 0, -(p ** 2)],
         "233": [1 / (p ** 2), -(p ** 2), 1, 0],
         "234": [1, 0, 1 / (p ** 2), -(p ** 2)],
         "235": [1, 1 / (p ** 2), -(p ** 2), 0],
         "236": [1, -(p ** 2), 0, 1 / (p ** 2)],
         "237": [-(p ** 2), 0, 1, 1 / (p ** 2)],
         "238": [-(p ** 2), 1 / (p ** 2), 0, 1],
         "239": [-(p ** 2), 1, 1 / (p ** 2), 0],
         "240": [0, 1 / (p ** 2), -1, (p ** 2)],
         "241": [0, -1, (p ** 2), 1 / (p ** 2)],
         "242": [0, (p ** 2), 1 / (p ** 2), -1],
         "243": [1 / (p ** 2), 0, (p ** 2), -1],
         "244": [1 / (p ** 2), -1, 0, (p ** 2)],
         "245": [1 / (p ** 2), (p ** 2), -1, 0],
         "246": [-1, 0, 1 / (p ** 2), (p ** 2)],
         "247": [-1, 1 / (p ** 2), (p ** 2), 0],
         "248": [-1, (p ** 2), 0, 1 / (p ** 2)],
         "249": [(p ** 2), 0, -1, 1 / (p ** 2)],
         "250": [(p ** 2), 1 / (p ** 2), 0, -1],
         "251": [(p ** 2), -1, 1 / (p ** 2), 0],
         "252": [0, 1 / (p ** 2), -1, -(p ** 2)],
         "253": [0, -1, -(p ** 2), 1 / (p ** 2)],
         "254": [0, -(p ** 2), 1 / (p ** 2), -1],
         "255": [1 / (p ** 2), 0, -(p ** 2), -1],
         "256": [1 / (p ** 2), -1, 0, -(p ** 2)],
         "257": [1 / (p ** 2), -(p ** 2), -1, 0],
         "258": [-1, 0, 1 / (p ** 2), -(p ** 2)],
         "259": [-1, 1 / (p ** 2), -(p ** 2), 0],
         "260": [-1, -(p ** 2), 0, 1 / (p ** 2)],
         "261": [-(p ** 2), 0, -1, 1 / (p ** 2)],
         "262": [-(p ** 2), 1 / (p ** 2), 0, -1],
         "263": [-(p ** 2), -1, 1 / (p ** 2), 0],
         "264": [0, -1 / (p ** 2), 1, (p ** 2)],
         "265": [0, 1, (p ** 2), -1 / (p ** 2)],
         "266": [0, (p ** 2), -1 / (p ** 2), 1],
         "267": [-1 / (p ** 2), 0, (p ** 2), 1],
         "268": [-1 / (p ** 2), 1, 0, (p ** 2)],
         "269": [-1 / (p ** 2), (p ** 2), 1, 0],
         "270": [1, 0, -1 / (p ** 2), (p ** 2)],
         "271": [1, -1 / (p ** 2), (p ** 2), 0],
         "272": [1, (p ** 2), 0, -1 / (p ** 2)],
         "273": [(p ** 2), 0, 1, -1 / (p ** 2)],
         "274": [(p ** 2), -1 / (p ** 2), 0, 1],
         "275": [(p ** 2), 1, -1 / (p ** 2), 0],
         "276": [0, -1 / (p ** 2), 1, -(p ** 2)],
         "277": [0, 1, -(p ** 2), -1 / (p ** 2)],
         "278": [0, -(p ** 2), -1 / (p ** 2), 1],
         "279": [-1 / (p ** 2), 0, -(p ** 2), 1],
         "280": [-1 / (p ** 2), 1, 0, -(p ** 2)],
         "281": [-1 / (p ** 2), -(p ** 2), 1, 0],
         "282": [1, 0, -1 / (p ** 2), -(p ** 2)],
         "283": [1, -1 / (p ** 2), -(p ** 2), 0],
         "284": [1, -(p ** 2), 0, -1 / (p ** 2)],
         "285": [-(p ** 2), 0, 1, -1 / (p ** 2)],
         "286": [-(p ** 2), -1 / (p ** 2), 0, 1],
         "287": [-(p ** 2), 1, -1 / (p ** 2), 0],
         "288": [0, -1 / (p ** 2), -1, (p ** 2)],
         "289": [0, -1, (p ** 2), -1 / (p ** 2)],
         "290": [0, (p ** 2), -1 / (p ** 2), -1],
         "291": [-1 / (p ** 2), 0, (p ** 2), -1],
         "292": [-1 / (p ** 2), -1, 0, (p ** 2)],
         "293": [-1 / (p ** 2), (p ** 2), -1, 0],
         "294": [-1, 0, -1 / (p ** 2), (p ** 2)],
         "295": [-1, -1 / (p ** 2), (p ** 2), 0],
         "296": [-1, (p ** 2), 0, -1 / (p ** 2)],
         "297": [(p ** 2), 0, -1, -1 / (p ** 2)],
         "298": [(p ** 2), -1 / (p ** 2), 0, -1],
         "299": [(p ** 2), -1, -1 / (p ** 2), 0],
         "300": [0, -1 / (p ** 2), -1, -(p ** 2)],
         "301": [0, -1, -(p ** 2), -1 / (p ** 2)],
         "302": [0, -(p ** 2), -1 / (p ** 2), -1],
         "303": [-1 / (p ** 2), 0, -(p ** 2), -1],
         "304": [-1 / (p ** 2), -1, 0, -(p ** 2)],
         "305": [-1 / (p ** 2), -(p ** 2), -1, 0],
         "306": [-1, 0, -1 / (p ** 2), -(p ** 2)],
         "307": [-1, -1 / (p ** 2), -(p ** 2), 0],
         "308": [-1, -(p ** 2), 0, -1 / (p ** 2)],
         "309": [-(p ** 2), 0, -1, -1 / (p ** 2)],
         "310": [-(p ** 2), -1 / (p ** 2), 0, -1],
         "311": [-(p ** 2), -1, -1 / (p ** 2), 0],
         "312": [0, 1 / p, p, (2 * p - 1)],
         "313": [0, p, (2 * p - 1), 1 / p],
         "314": [0, (2 * p - 1), 1 / p, p],
         "315": [1 / p, 0, (2 * p - 1), p],
         "316": [1 / p, p, 0, (2 * p - 1)],
         "317": [1 / p, (2 * p - 1), p, 0],
         "318": [p, 0, 1 / p, (2 * p - 1)],
         "319": [p, 1 / p, (2 * p - 1), 0],
         "320": [p, (2 * p - 1), 0, 1 / p],
         "321": [(2 * p - 1), 0, p, 1 / p],
         "322": [(2 * p - 1), 1 / p, 0, p],
         "323": [(2 * p - 1), p, 1 / p, 0],
         "324": [0, 1 / p, p, -(2 * p - 1)],
         "325": [0, p, -(2 * p - 1), 1 / p],
         "326": [0, -(2 * p - 1), 1 / p, p],
         "327": [1 / p, 0, -(2 * p - 1), p],
         "328": [1 / p, p, 0, -(2 * p - 1)],
         "329": [1 / p, -(2 * p - 1), p, 0],
         "330": [p, 0, 1 / p, -(2 * p - 1)],
         "331": [p, 1 / p, -(2 * p - 1), 0],
         "332": [p, -(2 * p - 1), 0, 1 / p],
         "333": [-(2 * p - 1), 0, p, 1 / p],
         "334": [-(2 * p - 1), 1 / p, 0, p],
         "335": [-(2 * p - 1), p, 1 / p, 0],
         "336": [0, 1 / p, -p, (2 * p - 1)],
         "337": [0, -p, (2 * p - 1), 1 / p],
         "338": [0, (2 * p - 1), 1 / p, -p],
         "339": [1 / p, 0, (2 * p - 1), -p],
         "340": [1 / p, -p, 0, (2 * p - 1)],
         "341": [1 / p, (2 * p - 1), -p, 0],
         "342": [-p, 0, 1 / p, (2 * p - 1)],
         "343": [-p, 1 / p, (2 * p - 1), 0],
         "344": [-p, (2 * p - 1), 0, 1 / p],
         "345": [(2 * p - 1), 0, -p, 1 / p],
         "346": [(2 * p - 1), 1 / p, 0, -p],
         "347": [(2 * p - 1), -p, 1 / p, 0],
         "348": [0, 1 / p, -p, -(2 * p - 1)],
         "349": [0, -p, -(2 * p - 1), 1 / p],
         "350": [0, -(2 * p - 1), 1 / p, -p],
         "351": [1 / p, 0, -(2 * p - 1), -p],
         "352": [1 / p, -p, 0, -(2 * p - 1)],
         "353": [1 / p, -(2 * p - 1), -p, 0],
         "354": [-p, 0, 1 / p, -(2 * p - 1)],
         "355": [-p, 1 / p, -(2 * p - 1), 0],
         "356": [-p, -(2 * p - 1), 0, 1 / p],
         "357": [-(2 * p - 1), 0, -p, 1 / p],
         "358": [-(2 * p - 1), 1 / p, 0, -p],
         "359": [-(2 * p - 1), -p, 1 / p, 0],
         "360": [0, -1 / p, p, (2 * p - 1)],
         "361": [0, p, (2 * p - 1), -1 / p],
         "362": [0, (2 * p - 1), -1 / p, p],
         "363": [-1 / p, 0, (2 * p - 1), p],
         "364": [-1 / p, p, 0, (2 * p - 1)],
         "365": [-1 / p, (2 * p - 1), p, 0],
         "366": [p, 0, -1 / p, (2 * p - 1)],
         "367": [p, -1 / p, (2 * p - 1), 0],
         "368": [p, (2 * p - 1), 0, -1 / p],
         "369": [(2 * p - 1), 0, p, -1 / p],
         "370": [(2 * p - 1), -1 / p, 0, p],
         "371": [(2 * p - 1), p, -1 / p, 0],
         "372": [0, -1 / p, p, -(2 * p - 1)],
         "373": [0, p, -(2 * p - 1), -1 / p],
         "374": [0, -(2 * p - 1), -1 / p, p],
         "375": [-1 / p, 0, -(2 * p - 1), p],
         "376": [-1 / p, p, 0, -(2 * p - 1)],
         "377": [-1 / p, -(2 * p - 1), p, 0],
         "378": [p, 0, -1 / p, -(2 * p - 1)],
         "379": [p, -1 / p, -(2 * p - 1), 0],
         "380": [p, -(2 * p - 1), 0, -1 / p],
         "381": [-(2 * p - 1), 0, p, -1 / p],
         "382": [-(2 * p - 1), -1 / p, 0, p],
         "383": [-(2 * p - 1), p, -1 / p, 0],
         "384": [0, -1 / p, -p, (2 * p - 1)],
         "385": [0, -p, (2 * p - 1), -1 / p],
         "386": [0, (2 * p - 1), -1 / p, -p],
         "387": [-1 / p, 0, (2 * p - 1), -p],
         "388": [-1 / p, -p, 0, (2 * p - 1)],
         "389": [-1 / p, (2 * p - 1), -p, 0],
         "390": [-p, 0, -1 / p, (2 * p - 1)],
         "391": [-p, -1 / p, (2 * p - 1), 0],
         "392": [-p, (2 * p - 1), 0, -1 / p],
         "393": [(2 * p - 1), 0, -p, -1 / p],
         "394": [(2 * p - 1), -1 / p, 0, -p],
         "395": [(2 * p - 1), -p, -1 / p, 0],
         "396": [0, -1 / p, -p, -(2 * p - 1)],
         "397": [0, -p, -(2 * p - 1), -1 / p],
         "398": [0, -(2 * p - 1), -1 / p, -p],
         "399": [-1 / p, 0, -(2 * p - 1), -p],
         "400": [-1 / p, -p, 0, -(2 * p - 1)],
         "401": [-1 / p, -(2 * p - 1), -p, 0],
         "402": [-p, 0, -1 / p, -(2 * p - 1)],
         "403": [-p, -1 / p, -(2 * p - 1), 0],
         "404": [-p, -(2 * p - 1), 0, -1 / p],
         "405": [-(2 * p - 1), 0, -p, -1 / p],
         "406": [-(2 * p - 1), -1 / p, 0, -p],
         "407": [-(2 * p - 1), -p, -1 / p, 0],
         "408": [1 / p, 1, p, 2],
         "409": [1 / p, p, 2, 1],
         "410": [1 / p, 2, 1, p],
         "411": [1, 1 / p, 2, p],
         "412": [1, p, 1 / p, 2],
         "413": [1, 2, p, 1 / p],
         "414": [p, 1 / p, 1, 2],
         "415": [p, 1, 2, 1 / p],
         "416": [p, 2, 1 / p, 1],
         "417": [2, 1 / p, p, 1],
         "418": [2, 1, 1 / p, p],
         "419": [2, p, 1, 1 / p],
         "420": [1 / p, 1, p, -2],
         "421": [1 / p, p, -2, 1],
         "422": [1 / p, -2, 1, p],
         "423": [1, 1 / p, -2, p],
         "424": [1, p, 1 / p, -2],
         "425": [1, -2, p, 1 / p],
         "426": [p, 1 / p, 1, -2],
         "427": [p, 1, -2, 1 / p],
         "428": [p, -2, 1 / p, 1],
         "429": [-2, 1 / p, p, 1],
         "430": [-2, 1, 1 / p, p],
         "431": [-2, p, 1, 1 / p],
         "432": [1 / p, 1, -p, 2],
         "433": [1 / p, -p, 2, 1],
         "434": [1 / p, 2, 1, -p],
         "435": [1, 1 / p, 2, -p],
         "436": [1, -p, 1 / p, 2],
         "437": [1, 2, -p, 1 / p],
         "438": [-p, 1 / p, 1, 2],
         "439": [-p, 1, 2, 1 / p],
         "440": [-p, 2, 1 / p, 1],
         "441": [2, 1 / p, -p, 1],
         "442": [2, 1, 1 / p, -p],
         "443": [2, -p, 1, 1 / p],
         "444": [1 / p, 1, -p, -2],
         "445": [1 / p, -p, -2, 1],
         "446": [1 / p, -2, 1, -p],
         "447": [1, 1 / p, -2, -p],
         "448": [1, -p, 1 / p, -2],
         "449": [1, -2, -p, 1 / p],
         "450": [-p, 1 / p, 1, -2],
         "451": [-p, 1, -2, 1 / p],
         "452": [-p, -2, 1 / p, 1],
         "453": [-2, 1 / p, -p, 1],
         "454": [-2, 1, 1 / p, -p],
         "455": [-2, -p, 1, 1 / p],
         "456": [1 / p, -1, p, 2],
         "457": [1 / p, p, 2, -1],
         "458": [1 / p, 2, -1, p],
         "459": [-1, 1 / p, 2, p],
         "460": [-1, p, 1 / p, 2],
         "461": [-1, 2, p, 1 / p],
         "462": [p, 1 / p, -1, 2],
         "463": [p, -1, 2, 1 / p],
         "464": [p, 2, 1 / p, -1],
         "465": [2, 1 / p, p, -1],
         "466": [2, -1, 1 / p, p],
         "467": [2, p, -1, 1 / p],
         "468": [1 / p, -1, p, -2],
         "469": [1 / p, p, -2, -1],
         "470": [1 / p, -2, -1, p],
         "471": [-1, 1 / p, -2, p],
         "472": [-1, p, 1 / p, -2],
         "473": [-1, -2, p, 1 / p],
         "474": [p, 1 / p, -1, -2],
         "475": [p, -1, -2, 1 / p],
         "476": [p, -2, 1 / p, -1],
         "477": [-2, 1 / p, p, -1],
         "478": [-2, -1, 1 / p, p],
         "479": [-2, p, -1, 1 / p],
         "480": [1 / p, -1, -p, 2],
         "481": [1 / p, -p, 2, -1],
         "482": [1 / p, 2, -1, -p],
         "483": [-1, 1 / p, 2, -p],
         "484": [-1, -p, 1 / p, 2],
         "485": [-1, 2, -p, 1 / p],
         "486": [-p, 1 / p, -1, 2],
         "487": [-p, -1, 2, 1 / p],
         "488": [-p, 2, 1 / p, -1],
         "489": [2, 1 / p, -p, -1],
         "490": [2, -1, 1 / p, -p],
         "491": [2, -p, -1, 1 / p],
         "492": [1 / p, -1, -p, -2],
         "493": [1 / p, -p, -2, -1],
         "494": [1 / p, -2, -1, -p],
         "495": [-1, 1 / p, -2, -p],
         "496": [-1, -p, 1 / p, -2],
         "497": [-1, -2, -p, 1 / p],
         "498": [-p, 1 / p, -1, -2],
         "499": [-p, -1, -2, 1 / p],
         "500": [-p, -2, 1 / p, -1],
         "501": [-2, 1 / p, -p, -1],
         "502": [-2, -1, 1 / p, -p],
         "503": [-2, -p, -1, 1 / p],
         "504": [-1 / p, 1, p, 2],
         "505": [-1 / p, p, 2, 1],
         "506": [-1 / p, 2, 1, p],
         "507": [1, -1 / p, 2, p],
         "508": [1, p, -1 / p, 2],
         "509": [1, 2, p, -1 / p],
         "510": [p, -1 / p, 1, 2],
         "511": [p, 1, 2, -1 / p],
         "512": [p, 2, -1 / p, 1],
         "513": [2, -1 / p, p, 1],
         "514": [2, 1, -1 / p, p],
         "515": [2, p, 1, -1 / p],
         "516": [-1 / p, 1, p, -2],
         "517": [-1 / p, p, -2, 1],
         "518": [-1 / p, -2, 1, p],
         "519": [1, -1 / p, -2, p],
         "520": [1, p, -1 / p, -2],
         "521": [1, -2, p, -1 / p],
         "522": [p, -1 / p, 1, -2],
         "523": [p, 1, -2, -1 / p],
         "524": [p, -2, -1 / p, 1],
         "525": [-2, -1 / p, p, 1],
         "526": [-2, 1, -1 / p, p],
         "527": [-2, p, 1, -1 / p],
         "528": [-1 / p, 1, -p, 2],
         "529": [-1 / p, -p, 2, 1],
         "530": [-1 / p, 2, 1, -p],
         "531": [1, -1 / p, 2, -p],
         "532": [1, -p, -1 / p, 2],
         "533": [1, 2, -p, -1 / p],
         "534": [-p, -1 / p, 1, 2],
         "535": [-p, 1, 2, -1 / p],
         "536": [-p, 2, -1 / p, 1],
         "537": [2, -1 / p, -p, 1],
         "538": [2, 1, -1 / p, -p],
         "539": [2, -p, 1, -1 / p],
         "540": [-1 / p, 1, -p, -2],
         "541": [-1 / p, -p, -2, 1],
         "542": [-1 / p, -2, 1, -p],
         "543": [1, -1 / p, -2, -p],
         "544": [1, -p, -1 / p, -2],
         "545": [1, -2, -p, -1 / p],
         "546": [-p, -1 / p, 1, -2],
         "547": [-p, 1, -2, -1 / p],
         "548": [-p, -2, -1 / p, 1],
         "549": [-2, -1 / p, -p, 1],
         "550": [-2, 1, -1 / p, -p],
         "551": [-2, -p, 1, -1 / p],
         "552": [-1 / p, -1, p, 2],
         "553": [-1 / p, p, 2, -1],
         "554": [-1 / p, 2, -1, p],
         "555": [-1, -1 / p, 2, p],
         "556": [-1, p, -1 / p, 2],
         "557": [-1, 2, p, -1 / p],
         "558": [p, -1 / p, -1, 2],
         "559": [p, -1, 2, -1 / p],
         "560": [p, 2, -1 / p, -1],
         "561": [2, -1 / p, p, -1],
         "562": [2, -1, -1 / p, p],
         "563": [2, p, -1, -1 / p],
         "564": [-1 / p, -1, p, -2],
         "565": [-1 / p, p, -2, -1],
         "566": [-1 / p, -2, -1, p],
         "567": [-1, -1 / p, -2, p],
         "568": [-1, p, -1 / p, -2],
         "569": [-1, -2, p, -1 / p],
         "570": [p, -1 / p, -1, -2],
         "571": [p, -1, -2, -1 / p],
         "572": [p, -2, -1 / p, -1],
         "573": [-2, -1 / p, p, -1],
         "574": [-2, -1, -1 / p, p],
         "575": [-2, p, -1, -1 / p],
         "576": [-1 / p, -1, -p, 2],
         "577": [-1 / p, -p, 2, -1],
         "578": [-1 / p, 2, -1, -p],
         "579": [-1, -1 / p, 2, -p],
         "580": [-1, -p, -1 / p, 2],
         "581": [-1, 2, -p, -1 / p],
         "582": [-p, -1 / p, -1, 2],
         "583": [-p, -1, 2, -1 / p],
         "584": [-p, 2, -1 / p, -1],
         "585": [2, -1 / p, -p, -1],
         "586": [2, -1, -1 / p, -p],
         "587": [2, -p, -1, -1 / p],
         "588": [-1 / p, -1, -p, -2],
         "589": [-1 / p, -p, -2, -1],
         "590": [-1 / p, -2, -1, -p],
         "591": [-1, -1 / p, -2, -p],
         "592": [-1, -p, -1 / p, -2],
         "593": [-1, -2, -p, -1 / p],
         "594": [-p, -1 / p, -1, -2],
         "595": [-p, -1, -2, -1 / p],
         "596": [-p, -2, -1 / p, -1],
         "597": [-2, -1 / p, -p, -1],
         "598": [-2, -1, -1 / p, -p],
         "599": [-2, -p, -1, -1 / p]
         }

lines_120 = []

for x in range(600):
    for y in range(x + 1, 600):
        dist = np.subtract(
            np.asarray(verts[(3 - len(str(x)))*'0' + str(x)]),
            np.asarray(verts[(3 - len(str(y)))*'0' + str(y)]))
        if abs(np.linalg.norm(dist) - 2/(p**2)) < 0.0001:
            lines_120.append(
                (3 - len(str(x)))*'0' + str(x) + (3 - len(str(y)))*'0' + str(y))

for i in range(120):
    print(", ".join(['"' + str(elem) + '"' for elem in lines_120[10 * i: 10 * i + 10]]) + ',')

# def dodecahedron_points(centre):

#     dodeca = []
#     for x in range(600):
#         dist = np.subtract(points_120[x], (p**2)*points_600[centre])
#         if abs(np.linalg.norm(dist) - np.sqrt(3)/p) < 0.0001:
#             dodeca.append(x)

#     return dodeca

# def dodecahedron_lines(centre):

#     dodeca_lines = []
#     for x in range(20):
#         for y in range(x + 1, 20):
#             dist = np.subtract(points_120[dodecahedron_points(centre)[x]],
#                                points_120[dodecahedron_points(centre)[y]])
#             if abs(np.linalg.norm(dist) - 2/(p**2)) < 0.0001:
#                 dodeca_lines.append([dodecahedron_points(centre)[x],
#                                      dodecahedron_points(centre)[y]])

#     return dodeca_lines

# def dodecahedron_points_gen(centre):

#     dodeca = []
#     for x in range(600):
#         dist = np.subtract(points_120[x], (p**2)*centre)
#         if abs(np.linalg.norm(dist) - np.sqrt(3)/p) < 0.0001:
#             dodeca.append(x)

#     return dodeca

# def dodecahedron_lines_gen(centre):

#     dodeca_lines = []
#     for x in range(20):
#         for y in range(x + 1, 20):
#             dist = np.subtract(points_120[dodecahedron_points_gen(centre)[x]],
#                                points_120[dodecahedron_points_gen(centre)[y]])
#             if abs(np.linalg.norm(dist) - 2/(p**2)) < 0.0001:
#                 dodeca_lines.append([dodecahedron_points_gen(centre)[x],
#                                      dodecahedron_points_gen(centre)[y]])

#     return dodeca_lines
# """
