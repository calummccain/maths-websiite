// ========================================================
// Order n icosahedral tuncated t{3,5,n}
// 
// Inputs: n
// Output: data
//
// Change history:
//     20/05/21 Initial commit
//     24/05/21 Renamed
//     31/05/21 Added v-v distance
//=========================================================

import { p, p2, p3, p4, p5, p_1, p_2, p_3 } from "./constants.js";
import { boundaries } from "./geometry-decider.js";

const icosahedronTruncData = (n) => {

    const metric = boundaries(n, Math.PI / Math.atan(p2), Math.PI / Math.atan(p2 / Math.sqrt(9 * p2 + 1)));

    const cos = Math.cos(Math.PI / n) ** 2;
    const cot = cos / (1 - cos);

    const A = p / 3;
    const B = (p + 2) / 3;
    const C = 1 / 3;
    const D = p3 / 3;
    const E = 2 * p / 3;
    const F = 2 / 3;

    const d = (v) => [
        (6 * p2 * cos - 1) * v[0] + (2 * p_1 - 6 * p * cos) * v[2] + (2 * p_3 - 6 * cos * p_1) * v[3],
        v[1],
        2 * p5 * cos * v[0] + (1 - 2 * p4 * cos) * v[2] - 2 * p2 * cos * v[3],
        2 * p3 * cos * v[0] - 2 * p2 * cos * v[2] + (1 - 2 * cos) * v[3]
    ];

    const f = (v) => [
        p3 * Math.sqrt(Math.abs(cot / (p2 + 1 / 9 - p4 * cot / 9))) * v[0],
        Math.sqrt(Math.abs((p4 * cot - 1) / (p2 + 1 / 9 - p4 * cot / 9))) * v[1],
        Math.sqrt(Math.abs((p4 * cot - 1) / (p2 + 1 / 9 - p4 * cot / 9))) * v[2],
        Math.sqrt(Math.abs((p4 * cot - 1) / (p2 + 1 / 9 - p4 * cot / 9))) * v[3]
    ];

    return {

        vertices: [
            [1, F, D, A], [1, B, E, C], [1, B, E, -C], [1, F, D, -A], [1, C, p, 0],
            [1, C, B, E], [1, A, F, D], [1, 0, C, p], [1, -A, F, D], [1, -C, B, E],
            [1, -F, D, A], [1, -C, p, 0], [1, -F, D, -A], [1, -B, E, -C], [1, -B, E, C],
            [1, -D, A, F], [1, -E, C, B], [1, -E, -C, B], [1, -D, -A, F], [1, -p, 0, C],
            [1, -C, B, -E], [1, C, B, -E], [1, A, F, -D], [1, 0, C, -p], [1, -A, F, -D],
            [1, D, A, -F], [1, E, C, -B], [1, E, -C, -B], [1, D, -A, -F], [1, p, 0, -C],
            [1, D, A, F], [1, p, 0, C], [1, D, -A, F], [1, E, -C, B], [1, E, C, B],
            [1, A, -F, D], [1, 0, -C, p], [1, -A, -F, D], [1, -C, -B, E], [1, C, -B, E],
            [1, -D, -A, -F], [1, -p, 0, -C], [1, -D, A, -F], [1, -E, C, -B], [1, -E, -C, -B],
            [1, -F, -D, -A], [1, -B, -E, -C], [1, -B, -E, C], [1, -F, -D, A], [1, -C, -p, 0],
            [1, C, -p, 0], [1, F, -D, A], [1, B, -E, C], [1, B, -E, -C], [1, F, -D, -A],
            [1, -C, -B, -E], [1, -A, -F, -D], [1, 0, -C, -p], [1, A, -F, -D], [1, C, -B, -E]
        ],

        edges: [
            [0, 1], [0, 4], [0, 5], [1, 2], [1, 30],
            [2, 3], [2, 25], [3, 4], [3, 21], [4, 11],
            [5, 6], [5, 9], [6, 7], [6, 34], [7, 8],
            [7, 36], [8, 9], [8, 16], [9, 10], [10, 11],
            [10, 14], [11, 12], [12, 13], [12, 20], [13, 14],
            [13, 42], [14, 15], [15, 16], [15, 19], [16, 17],
            [17, 18], [17, 37], [18, 19], [18, 47], [19, 41],
            [20, 21], [20, 24], [21, 22], [22, 23], [22, 26],
            [23, 24], [23, 57], [24, 43], [25, 26], [25, 29],
            [26, 27], [27, 28], [27, 58], [28, 29], [28, 53],
            [29, 31], [30, 31], [30, 34], [31, 32], [32, 33],
            [32, 52], [33, 34], [33, 35], [35, 36], [35, 39],
            [36, 37], [37, 38], [38, 39], [38, 48], [39, 51],
            [40, 41], [40, 44], [40, 46], [41, 42], [42, 43],
            [43, 44], [44, 56], [45, 46], [45, 49], [45, 55],
            [46, 47], [47, 48], [48, 49], [49, 50], [50, 51],
            [50, 54], [51, 52], [52, 53], [53, 54], [54, 59],
            [55, 56], [55, 59], [56, 57], [57, 58], [58, 59]
        ],

        faces: [
            [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19],
            [20, 21, 22, 23, 24], [25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [35, 36, 37, 38, 39],
            [40, 41, 42, 43, 44], [45, 46, 47, 48, 49], [50, 51, 52, 53, 54], [55, 56, 57, 58, 59],
            [0, 4, 11, 10, 9, 5], [8, 9, 10, 14, 15, 16], [7, 8, 16, 17, 37, 36],
            [6, 7, 36, 35, 33, 34], [0, 1, 30, 34, 6, 5], [3, 4, 11, 12, 20, 21],
            [12, 13, 42, 43, 24, 20], [13, 14, 15, 19, 41, 42], [1, 2, 25, 29, 31, 30],
            [18, 19, 41, 40, 46, 47], [17, 18, 47, 48, 38, 37], [38, 39, 51, 50, 49, 48],
            [32, 33, 35, 39, 51, 52], [28, 29, 31, 32, 52, 53], [27, 28, 53, 54, 59, 58],
            [2, 3, 21, 22, 26, 25], [22, 23, 57, 58, 27, 26], [23, 24, 43, 44, 56, 57],
            [40, 44, 56, 55, 45, 46], [45, 49, 50, 54, 59, 55]
        ],

        numVertices: 60,

        numEdges: 90,

        numFaces: 32,

        // CFE
        // (0, 1, 0, 0)
        a: (v) => [v[0], -v[1], v[2], v[3]],

        // CFV
        // (0, p, -1, 1 / p)
        b: (v) => [v[0], (v[1] + v[2] * p_1 - p * v[3]) / 2, (v[1] * p_1 + p * v[2] + v[3]) / 2, (-p * v[1] + v[2] - v[3] * p_1) / 2],

        // CEV
        // (0, 0, 0, 1)
        c: (v) => [v[0], v[1], v[2], -v[3]],

        // FEV
        // (p cot ** 2 - 1 / p ** 3, 0, p ** 2, 1)
        d: d,

        // Identity matrix
        e: (v) => v,

        f: f,

        faceReflections: [""],

        outerReflection: "d",

        // (1, 1, p, 0)
        V: [1, 1, p, 0],

        // (1, 0, p, 0)
        E: [1, 0, p, 0],

        // (3, 0, p ** 3, p)
        F: [3, 0, p3, p],

        // (1, 0, 0, 0)
        C: [1, 0, 0, 0],

        // 3 4 5 6 7
        // h u u u u
        metric: metric,

        cellType: "spherical",

        vv: (p4 * cot + 9 * p2 - 1) / Math.abs(9 * p2 + 1 - p4 * cot)

    }

}

export { icosahedronTruncData };