//aka {3,4,3}

const vertices = [
    [1, 1, 0, 0],
    [1, -1, 0, 0],
    [-1, 1, 0, 0],
    [-1, -1, 0, 0],
    [1, 0, 1, 0],
    [1, 0, -1, 0],
    [-1, 0, 1, 0],
    [-1, 0, -1, 0],
    [1, 0, 0, 1],
    [1, 0, 0, -1],
    [-1, 0, 0, 1],
    [-1, 0, 0, -1],
    [0, 1, 1, 0],
    [0, 1, -1, 0],
    [0, -1, 1, 0],
    [0, -1, -1, 0],
    [0, 1, 0, 1],
    [0, 1, 0, -1],
    [0, -1, 0, 1],
    [0, -1, 0, -1],
    [0, 0, 1, 1],
    [0, 0, 1, -1],
    [0, 0, -1, 1],
    [0, 0, -1, -1],
];

const dualVertices = [
    [1, 0, 0, 0],
    [-1, 0, 0, 0],
    [0, 1, 0, 0],
    [0, -1, 0, 0],
    [0, 0, 1, 0],
    [0, 0, -1, 0],
    [0, 0, 0, 1],
    [0, 0, 0, -1],
    [1 / 2, 1 / 2, 1 / 2, 1 / 2],
    [1 / 2, 1 / 2, 1 / 2, -1 / 2],
    [1 / 2, 1 / 2, -1 / 2, 1 / 2],
    [1 / 2, 1 / 2, -1 / 2, -1 / 2],
    [1 / 2, -1 / 2, 1 / 2, 1 / 2],
    [1 / 2, -1 / 2, 1 / 2, -1 / 2],
    [1 / 2, -1 / 2, -1 / 2, 1 / 2],
    [1 / 2, -1 / 2, -1 / 2, -1 / 2],
    [-1 / 2, 1 / 2, 1 / 2, 1 / 2],
    [-1 / 2, 1 / 2, 1 / 2, -1 / 2],
    [-1 / 2, 1 / 2, -1 / 2, 1 / 2],
    [-1 / 2, 1 / 2, -1 / 2, -1 / 2],
    [-1 / 2, -1 / 2, 1 / 2, 1 / 2],
    [-1 / 2, -1 / 2, 1 / 2, -1 / 2],
    [-1 / 2, -1 / 2, -1 / 2, 1 / 2],
    [-1 / 2, -1 / 2, -1 / 2, -1 / 2]
];

const lines = [
    [0, 4], [0, 5], [0, 8], [0, 9], [0, 12],
    [0, 13], [0, 16], [0, 17], [1, 4], [1, 5],
    [1, 8], [1, 9], [1, 14], [1, 15], [1, 18],
    [1, 19], [2, 6], [2, 7], [2, 10], [2, 11],
    [2, 12], [2, 13], [2, 16], [2, 17], [3, 6],
    [3, 7], [3, 10], [3, 11], [3, 14], [3, 15],
    [3, 18], [3, 19], [4, 8], [4, 9], [4, 12],
    [4, 14], [4, 20], [4, 21], [5, 8], [5, 9],
    [5, 13], [5, 15], [5, 22], [5, 23], [6, 10],
    [6, 11], [6, 12], [6, 14], [6, 20], [6, 21],
    [7, 10], [7, 11], [7, 13], [7, 15], [7, 22],
    [7, 23], [8, 16], [8, 18], [8, 20], [8, 22],
    [9, 17], [9, 19], [9, 21], [9, 23], [10, 16],
    [10, 18], [10, 20], [10, 22], [11, 17], [11, 19],
    [11, 21], [11, 23], [12, 16], [12, 17], [12, 20],
    [12, 21], [13, 16], [13, 17], [13, 22], [13, 23],
    [14, 18], [14, 19], [14, 20], [14, 21], [15, 18],
    [15, 19], [15, 22], [15, 23], [16, 20], [16, 22],
    [17, 21], [17, 23], [18, 20], [18, 22], [19, 21],
    [19, 23]
];

const faces = [
    [0, 4, 8], [0, 4, 9], [0, 4, 12], [0, 5, 8],
    [0, 5, 9], [0, 5, 13], [0, 8, 16], [0, 9, 17],
    [0, 12, 16], [0, 12, 17], [0, 13, 16], [0, 13, 17],
    [1, 4, 8], [1, 4, 9], [1, 4, 14], [1, 5, 8],
    [1, 5, 9], [1, 5, 15], [1, 8, 18], [1, 9, 19],
    [1, 14, 18], [1, 14, 19], [1, 15, 18], [1, 15, 19],
    [2, 6, 10], [2, 6, 11], [2, 6, 12], [2, 7, 10],
    [2, 7, 11], [2, 7, 13], [2, 10, 16], [2, 11, 17],
    [2, 12, 16], [2, 12, 17], [2, 13, 16], [2, 13, 17],
    [3, 6, 10], [3, 6, 11], [3, 6, 14], [3, 7, 10],
    [3, 7, 11], [3, 7, 15], [3, 10, 18], [3, 11, 19],
    [3, 14, 18], [3, 14, 19], [3, 15, 18], [3, 15, 19],
    [4, 8, 20], [4, 9, 21], [4, 12, 20], [4, 12, 21],
    [4, 14, 20], [4, 14, 21], [5, 8, 22], [5, 9, 23],
    [5, 13, 22], [5, 13, 23], [5, 15, 22], [5, 15, 23],
    [6, 10, 20], [6, 11, 21], [6, 12, 20], [6, 12, 21],
    [6, 14, 20], [6, 14, 21], [7, 10, 22], [7, 11, 23],
    [7, 13, 22], [7, 13, 23], [7, 15, 22], [7, 15, 23],
    [8, 16, 20], [8, 16, 22], [8, 18, 20], [8, 18, 22],
    [9, 17, 21], [9, 17, 23], [9, 19, 21], [9, 19, 23],
    [10, 16, 20], [10, 16, 22], [10, 18, 20], [10, 18, 22],
    [11, 17, 21], [11, 17, 23], [11, 19, 21], [11, 19, 23],
    [12, 16, 20], [12, 17, 21], [13, 16, 22], [13, 17, 23],
    [14, 18, 20], [14, 19, 21], [15, 18, 22], [15, 19, 23]
];

const cells = [
    [0, 1, 4, 5, 8, 9],
    [2, 3, 6, 7, 10, 11],
    [0, 2, 12, 13, 16, 17],
    [1, 3, 14, 15, 18, 19],
    [4, 6, 12, 14, 20, 21],
    [5, 7, 13, 15, 22, 23],
    [8, 10, 16, 18, 20, 22],
    [9, 11, 17, 19, 21, 23],
    [0, 4, 8, 12, 16, 20],
    [0, 4, 9, 12, 17, 21],
    [0, 5, 8, 13, 16, 22],
    [0, 5, 9, 13, 17, 23],
    [1, 4, 8, 14, 18, 20],
    [1, 4, 9, 14, 19, 21],
    [1, 5, 8, 15, 18, 22],
    [1, 5, 9, 15, 19, 23],
    [2, 6, 10, 12, 16, 20],
    [2, 6, 11, 12, 17, 21],
    [2, 7, 10, 13, 16, 22],
    [2, 7, 11, 13, 17, 23],
    [3, 6, 10, 14, 18, 20],
    [3, 6, 11, 14, 19, 21],
    [3, 7, 10, 15, 18, 22],
    [3, 7, 11, 15, 19, 23]
];

function distance(x, y) {

    var d = (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2 + (x[3] - y[3]) ** 2;

    return Math.sqrt(d);

}

function scaleQuaternion(x, s) {

    return [x[0] * s, x[1] * s, x[2] * s, x[3] * s];

}

function sumQuaternions(m) {

    var v = [];

    for (var i = 0; i < m[0].length; i++) {

        v[i] = 0;

        for (var j = 0; j < m.length; j++) {

            v[i] += m[j][i];

        }

    }

    return v;

}

function findLines(l) {

    var lines = [];

    for (var i = 0; i < vertices.length; i++) {

        for (var j = i + 1; j < vertices.length; j++) {

            if (Math.abs(distance(vertices[i], vertices[j]) - l) < 0.001) {

                lines.push([i, j]);

            }

        }

    }

    return lines;

}

function findFaces(l) {

    var faces = [];

    for (var i = 0; i < vertices.length; i++) {

        for (var j = i + 1; j < vertices.length; j++) {

            for (var k = j + 1; k < vertices.length; k++) {

                var face = sumQuaternions([vertices[i], vertices[j], vertices[k]]);

                if (Math.abs(distance(face, [0, 0, 0, 0]) - l) < 0.001) {

                    faces.push([i, j, k]);

                }

            }

        }

    }

    return faces;

}

function findCells(l) {

    var cells = [];

    for (var i = 0; i < 24; i++) {

        cells[i] = [];

        for (var j = 0; j < 24; j++) {

            var d = distance(dualVertices[i], scaleQuaternion(vertices[j], 1 / Math.sqrt(2)));

            if (Math.abs(d - l) < 0.001) {

                cells[i].push(j);

            }

        }

    }

    return cells;

}

function cellFacesFinder() {
    cellFaces = [];
    for (var m = 0; m < cells.length; m++) {
        var individual = [];
        for (var i = 0; i < 6; i++) {
            for (var j = i + 1; j < 6; j++) {
                for (var k = j + 1; k < 6; k++) {
                    if (faces.includes([i, j, k])) {
                        individual.push(0);
                    }
                }
            }
        }
        cellFaces[m] = individual;
    }
    return cellFaces;
}

console.log(cellFacesFinder());
console.log([[1, 2]].indexOf([1, 2]))