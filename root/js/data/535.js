// order 5 dodecahedral (compact)

import { p } from "./constants.js";

const vertices = [
    [[1, 1, 1, 1]],
    [[1, 1, 1, -1]],
    [[1, 1, -1, 1]],
    [[1, 1, -1, -1]],
    [[1, -1, 1, 1]],
    [[1, -1, 1, -1]],
    [[1, -1, -1, 1]],
    [[1, -1, -1, -1]],
    [[1, 0, p, 1 / p]],
    [[1, 0, p, -1 / p]],
    [[1, 0, -p, 1 / p]],
    [[1, 0, -p, -1 / p]],
    [[1, p, 1 / p, 0]],
    [[1, p, -1 / p, 0]],
    [[1, -p, 1 / p, 0]],
    [[1, -p, -1 / p, 0]],
    [[1, 1 / p, 0, p]],
    [[1, -1 / p, 0, p]],
    [[1, 1 / p, 0, -p]],
    [[1, -1 / p, 0, -p]]
];

//add faces
const faces = [[]];

const a = [
    [1, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 0, 1, 0],
    [0, 0, 0, -1]
];

const b = [
    [1, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 0, -1, 0],
    [0, 0, 0, 1]
];

const c = [
    [1, 0, 0, 0],
    [0, 1 - 2 / (4 * p ** 2), 1 / 2, 1 / (2 * p)],
    [0, 1 / 2, 1 - 2 * p ** 4 / (4 * p ** 2), -p / 2],
    [0, 1 / (2 * p), -p / 2, 1 - 2 * p ** 2 / (4 * p ** 2)]
];

const d = [
    [(4 * p + 1) / 2, -(4 * p - 1) / (2 * p), 0, -(4 * p - 1) / (2 * (p ** 2))],
    [(p ** 5) / 2, 1 - (p ** 4) / 2, 0, -(p ** 3) / 2],
    [0, 0, 1, 0],
    [p ** 4 / 2, -(p ** 3) / 2, 0, 1 - ((p ** 2) / 2)]
];

const e = [
    [1, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 0, 1, 0],
    [0, 0, 0, 1]
];

const f = [
    [p ** 4 / 2, 0, 0, 0],
    [0, p * Math.sqrt(4 * p - 1) / 2, 0, 0],
    [0, 0, p * Math.sqrt(4 * p - 1) / 2, 0],
    [0, 0, 0, p * Math.sqrt(4 * p - 1) / 2]
];

const matrixDict = {
    'a': a,
    'b': b,
    'c': c,
    'd': d,
    'e': e,
    'f': f
};

export { vertices, faces, a, b, c, d, e, f, matrixDict };